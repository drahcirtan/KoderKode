*&---------------------------------------------------------------------*
*& Report  ZVRSL000032
*&
*&---------------------------------------------------------------------*
*& Change-Request/Issue-Log No./Project Name:
*& SAP MM / FEG SAP Implementation Project Phase I
*&
*& Description: 
*& Function   : 
*& Sorting    : N/A
*& Author     : 
*& Company    : 
*& Written on : 
*& TR         : 
*&~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*& MODIFICATION LOG.
*&
*& Change request / Issue-Log No. /Project Name:
*& Modification ID: MODXXX
*& Date           : dd/mon/yyyy
*& Done By        : SAP User - Name
*& Company        :
*& TR             :
*& Description    :
*&~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*

REPORT zvrsl000032.

*----------------------------------------------------------------------*
* Table    Definition
*----------------------------------------------------------------------*
TABLES: vbak,               "Sales Document: Header Data
        vbup,               "Sales Document: Item Status
        vbap.               "Sales Document: Item Data

TABLES: a802,
        mara,
        mvke.
*----------------------------------------------------------------------*
* Types    Definition
*----------------------------------------------------------------------*
TYPES: BEGIN OF ty_output,
         matnr         TYPE matnr,             "Material Number
         maktx         TYPE maktx,             "Material Description
         extwg         TYPE extwg,             "Brand
         knumh         TYPE konp-knumh,        "Condition Type
         old_value(15) TYPE c,                 "Old Value
         new_value(15) TYPE c,                 "New Value
         status_ind    TYPE c,                 "Status Indicator
         status(100)   TYPE c,                 "Status Description
       END OF ty_output.

TYPES: BEGIN OF ty_vk11,
         matnr    TYPE matnr,
         maktx    TYPE maktx,
         kbetr    TYPE kbetr_kond,
         konwa    TYPE konwa,
         kpein    TYPE kpein,
         kmein    TYPE kmein,
         kzbzg    TYPE kzbzg,
         datab    TYPE kodatab,
         datbi    TYPE kodatbi,
         loevm_ko TYPE loevm_ko,
         kozukz   TYPE kozukz,
         kostkz   TYPE kostkz,
         kotxkz   TYPE kotxkz,
         kznep    TYPE kznep,
         zterm    TYPE dzterm,
         valdt    TYPE valdt,
         valtg    TYPE valtg,
       END OF ty_vk11.

TYPES: BEGIN OF ty_zvsl03,
*TYPES:
         matnr       TYPE matnr,       "Material
         maktx       TYPE maktx,       "Description
         vkorg       TYPE vkorg,       "Sales Organisation
         vtweg       TYPE vtweg,       "Distribution Channel
         werks       TYPE werks,       "Plants
         kunnr       TYPE kunnr,       "Customer
         extwg       TYPE extwg,       "Brand
         matkl       TYPE matkl,       "Material Group
         prdha       TYPE prodh_d,     "Model
         inco1       TYPE inco1,
         waers       TYPE waers,       "Currency Keys
         zmpl        TYPE kwert,
         zmul        TYPE kwert,
         zex1        TYPE kwert,
         zfrt        TYPE kwert,
         zfct        TYPE kwert,
         zbuf        TYPE kwert,
         xbft        TYPE kwert,
         zfeg        TYPE kwert,
         zdis        TYPE kwert,

         konwa       TYPE konwa,       "Currency for ZMPL
*         table(4)    TYPE c,           "Table Name
         knumh       TYPE konp-knumh,  "Condition Record Number
         zmpl_n      TYPE zvs_zvsl03-zmpl,
         zmul_n      TYPE zvs_zvsl03-zmul,
         zex1_n      TYPE zvs_zvsl03-zex1,
         zfrt_n      TYPE zvs_zvsl03-zfrt,
         zfct_n      TYPE zvs_zvsl03-zfct,
         zbuf_n      TYPE zvs_zvsl03-zbuf,
         zbft_n      TYPE zvs_zvsl03-zbft,
         zdis_n      TYPE zvs_zvsl03-zdis,
         status_ind  TYPE c,
         status(100) TYPE c,
       END OF ty_zvsl03.

TYPES: BEGIN OF ty_mat,
         matnr TYPE mara-matnr,
         matkl TYPE mara-matkl,
         prdha TYPE mara-prdha,
         extwg TYPE mara-extwg,
         werks TYPE marc-werks,
         maktx TYPE makt-maktx,
       END OF ty_mat.


TYPES: BEGIN OF ty_header,
         col_num(20) TYPE c,
         header(30)  TYPE c,
       END OF ty_header.
*----------------------------------------------------------------------*
* DATA Declarations
*----------------------------------------------------------------------*
DATA:wa_order_header_in      TYPE bapisdhd1,
     wa_order_header_inx     TYPE bapisdhd1x,
     wa_order_partners       TYPE bapiparnr,
     wa_order_items_in       TYPE bapisditm,
     wa_order_items_inx      TYPE bapisditmx,
     wa_order_schedules_in   TYPE bapischdl,
     wa_order_schedules_inx  TYPE bapischdlx,
     wa_order_conditions_in  TYPE bapicond,
     wa_order_conditions_inx TYPE bapicondx.

DATA: order_header_in      TYPE                   bapisdhd1,
      order_header_inx     TYPE                   bapisdhd1x,
      order_items_in       TYPE STANDARD TABLE OF bapisditm,
      order_items_inx      TYPE STANDARD TABLE OF bapisditmx,
      order_partners       TYPE STANDARD TABLE OF bapiparnr,
      order_schedules_in   TYPE STANDARD TABLE OF bapischdl,
      order_schedules_inx  TYPE STANDARD TABLE OF bapischdlx,
      order_conditions_in  TYPE STANDARD TABLE OF bapicond,
      order_conditions_inx TYPE STANDARD TABLE OF bapicondx,
      return_msg           TYPE STANDARD TABLE OF bapiret2.

DATA: g_vbeln  TYPE bapivbeln-vbeln,
      g_stonr  TYPE tj30-stonr,
      g_string TYPE string.

DATA: g_table(10).
*----------------------------------------------------------------------*
* Internal Table Declarations
*----------------------------------------------------------------------*
DATA: it_zvsl03   TYPE STANDARD TABLE OF zvs_zvsl03 WITH HEADER LINE,
      it_zvsl03_n TYPE STANDARD TABLE OF ty_zvsl03  WITH HEADER LINE,
      it_vk11     TYPE STANDARD TABLE OF ty_vk11    WITH HEADER LINE,
      it_mat      TYPE STANDARD TABLE OF ty_mat     WITH HEADER LINE,
      it_a004     TYPE STANDARD TABLE OF a004       WITH HEADER LINE,
      it_a005     TYPE STANDARD TABLE OF a005       WITH HEADER LINE,
      it_a118     TYPE STANDARD TABLE OF a118       WITH HEADER LINE,
      it_a802     TYPE STANDARD TABLE OF a802       WITH HEADER LINE,
      it_a804     TYPE STANDARD TABLE OF a804       WITH HEADER LINE,
      it_a809     TYPE STANDARD TABLE OF a809       WITH HEADER LINE,
      it_a903     TYPE STANDARD TABLE OF a903       WITH HEADER LINE,
      it_a904     TYPE STANDARD TABLE OF a904       WITH HEADER LINE,
      it_a920     TYPE STANDARD TABLE OF a920       WITH HEADER LINE,
      it_a921     TYPE STANDARD TABLE OF a921       WITH HEADER LINE,
      it_a922     TYPE STANDARD TABLE OF a922       WITH HEADER LINE,
      it_a923     TYPE STANDARD TABLE OF a923       WITH HEADER LINE,
      it_a924     TYPE STANDARD TABLE OF a924       WITH HEADER LINE,
      it_a925     TYPE STANDARD TABLE OF a925       WITH HEADER LINE,
      it_a927     TYPE STANDARD TABLE OF a927       WITH HEADER LINE,
      it_a928     TYPE STANDARD TABLE OF a928       WITH HEADER LINE,
      it_a929     TYPE STANDARD TABLE OF a929       WITH HEADER LINE,
      it_a930     TYPE STANDARD TABLE OF a930       WITH HEADER LINE,
      it_konp     TYPE STANDARD TABLE OF konp       WITH HEADER LINE,
      it_tvtw     TYPE STANDARD TABLE OF tvtw       WITH HEADER LINE,
      it_twew     TYPE STANDARD TABLE OF twew       WITH HEADER LINE.

DATA: it_extwg TYPE RANGE OF selopt WITH HEADER LINE,
      it_prdha TYPE RANGE OF selopt WITH HEADER LINE.

DATA: it_fieldcat TYPE STANDARD TABLE OF slis_fieldcat_alv,
      it_sort     TYPE                   slis_t_sortinfo_alv..
DATA: it_event TYPE STANDARD TABLE OF slis_alv_event.

*DATA: it_bdcdata TYPE STANDARD TABLE OF bdcdata.

DATA: it_output TYPE STANDARD TABLE OF ty_output.

DATA: it_messages TYPE STANDARD TABLE OF bdcmsgcoll.

DATA: it_bdcdata TYPE TABLE OF bdcdata,
      it_messtab TYPE TABLE OF bdcmsgcoll.

*----------------------------------------------------------------------*
* Work Area Declarations
*----------------------------------------------------------------------*
DATA: wa_zvsl03 TYPE ty_zvsl03,
      wa_mat    TYPE ty_mat,
      wa_a004   TYPE a004,
      wa_a005   TYPE a005,
      wa_a118   TYPE a118,
      wa_a802   TYPE a802,
      wa_a804   TYPE a804,
      wa_a809   TYPE a809,
      wa_a903   TYPE a903,
      wa_a904   TYPE a904,
      wa_a920   TYPE a920,
      wa_a921   TYPE a921,
      wa_a922   TYPE a922,
      wa_a923   TYPE a923,
      wa_a924   TYPE a924,
      wa_a925   TYPE a925,
      wa_a927   TYPE a927,
      wa_a928   TYPE a928,
      wa_a929   TYPE a929,
      wa_a930   TYPE a930,
      wa_konp   TYPE konp,
      wa_tvtw   TYPE tvtw,
      wa_twew   TYPE twew.

DATA: wa_tvagt TYPE tvagt.

DATA: wa_return_msg TYPE bapiret2.

DATA: wa_fieldcat TYPE slis_fieldcat_alv,
      wa_sort     TYPE slis_sortinfo_alv,
      wa_layout   TYPE slis_layout_alv..

DATA: wa_event TYPE slis_alv_event.

DATA: wa_bdcdata TYPE bdcdata,
      wa_messtab TYPE bdcmsgcoll.

DATA: wa_output TYPE ty_output.

*To handle input csv if the csv column changes depends on the file format.
FIELD-SYMBOLS: <field>      TYPE any,
               <zmpl>       TYPE any,
               <zmul>       TYPE any,
               <zex1>       TYPE any,
               <zfrt>       TYPE any,
               <zfct>       TYPE any,
               <zbuf>       TYPE any,
               <matnr>      TYPE any,
               <prdha>      TYPE any,
               <extwg>      TYPE any,
               <vkorg>      TYPE any,
               <vtweg>      TYPE any,
               <matkl>      TYPE any,
               <waers>      TYPE any,
               <inco1>      TYPE any,
               <knumh>      TYPE any,
               <kunnr>      TYPE any,
               <test>       TYPE any,
               <old_field>  TYPE any,
               <cond_table> TYPE any.

FIELD-SYMBOLS: <condition_table> TYPE ANY TABLE.
*----------------------------------------------------------------------*
* Constants
*----------------------------------------------------------------------*
CONSTANTS:       c_c          VALUE 'C',
                 c_e          VALUE 'E',
                 c_i          VALUE 'I',
                 c_s          VALUE 'S',
                 c_x          VALUE 'X',
                 c_u          VALUE 'U',
                 c_w          VALUE 'W',
                 c_0          VALUE '0',
                 c_1          VALUE '1',
                 c_12(2)      VALUE '12',
                 false        VALUE '0',
                 true         VALUE '1'.

*&---------------------------------------------------------------------*
*& INITIALIZATION
*&---------------------------------------------------------------------*
INITIALIZATION.

*&---------------------------------------------------------------------*
*& SELECTION SCREEN
*&---------------------------------------------------------------------*
  SELECTION-SCREEN BEGIN OF BLOCK a1 WITH FRAME TITLE text-001.

  SELECTION-SCREEN COMMENT /1(75) texth001.

  PARAMETERS: r_act01 RADIOBUTTON GROUP rg2 USER-COMMAND rga DEFAULT 'X',
              r_act02 RADIOBUTTON GROUP rg2.

  SELECTION-SCREEN SKIP.

  SELECTION-SCREEN COMMENT /1(75) text003 MODIF ID zvs.
*--------------------------------------------------------------------
*For Field ZMPL
*--------------------------------------------------------------------
  SELECTION-SCREEN BEGIN OF LINE.
  PARAMETERS: r_zmpl RADIOBUTTON GROUP rg1 MODIF ID rg1 DEFAULT 'X' USER-COMMAND rga.
  SELECTION-SCREEN COMMENT (6) FOR FIELD r_zmpl MODIF ID rg1.
  SELECTION-SCREEN POSITION 10.
  PARAMETERS: p_zmpl(10) TYPE c  MODIF ID rg1.
  SELECTION-SCREEN COMMENT (10) FOR FIELD p_zmpl MODIF ID rg1.
  SELECTION-SCREEN COMMENT (10) FOR FIELD p_zmpl_d MODIF ID rg1.
  PARAMETERS: p_zmpl_d TYPE sy-datum MODIF ID rg1.
  SELECTION-SCREEN END OF LINE.

*Selection for ZMPL Key Combination
  SELECTION-SCREEN BEGIN OF LINE.
  SELECTION-SCREEN POSITION 5.
  PARAMETERS: r_zmpl01 RADIOBUTTON GROUP zmpl MODIF ID mpl USER-COMMAND rga.
  SELECTION-SCREEN COMMENT (10) FOR FIELD r_zmpl01 MODIF ID mpl.
  SELECTION-SCREEN POSITION 18.
  PARAMETER:  r_zmpl02 RADIOBUTTON GROUP zmpl MODIF ID mpl.
  SELECTION-SCREEN COMMENT (20) FOR FIELD r_zmpl02 MODIF ID mpl.
  SELECTION-SCREEN POSITION 41.
  PARAMETERS: r_zmpl03 RADIOBUTTON GROUP zmpl MODIF ID mpl.
  SELECTION-SCREEN COMMENT (20) FOR FIELD r_zmpl03 MODIF ID mpl.
  SELECTION-SCREEN END OF LINE.

  SELECTION-SCREEN BEGIN OF LINE.
  SELECTION-SCREEN POSITION 5.
  PARAMETERS: r_zmpl04 RADIOBUTTON GROUP zmpl MODIF ID mpl.
  SELECTION-SCREEN COMMENT (10) FOR FIELD r_zmpl04 MODIF ID mpl.

  SELECTION-SCREEN POSITION 18.
  PARAMETERS: r_zmpl05 RADIOBUTTON GROUP zmpl MODIF ID mpl DEFAULT 'X'.
  SELECTION-SCREEN COMMENT (20) FOR FIELD r_zmpl05 MODIF ID mpl.
  SELECTION-SCREEN END OF LINE.

**--------------------------------------------------------------------
**For Field ZMUL
**--------------------------------------------------------------------
*  SELECTION-SCREEN BEGIN OF LINE.
**PARAMETERS: x_zmul AS CHECKBOX DEFAULT space.
*  PARAMETERS: r_zmul RADIOBUTTON GROUP rg1 MODIF ID rg1.
*  SELECTION-SCREEN COMMENT (6) FOR FIELD r_zmul MODIF ID rg1.
*  SELECTION-SCREEN POSITION 10.
*  PARAMETERS p_zmul(10) TYPE c MODIF ID rg1.
*  SELECTION-SCREEN COMMENT (10) FOR FIELD p_zmul MODIF ID rg1.
*  SELECTION-SCREEN COMMENT (10) FOR FIELD p_zmpl_d MODIF ID rg1.
*  PARAMETERS: p_zmul_d TYPE sy-datum MODIF ID rg1.
*  SELECTION-SCREEN END OF LINE.
*
**Selection for ZMUL Key Combination
*  SELECTION-SCREEN BEGIN OF LINE.
*  SELECTION-SCREEN POSITION 5.
*  PARAMETERS: r_zmul01 RADIOBUTTON GROUP zmul MODIF ID mul.
*  SELECTION-SCREEN COMMENT (10) FOR FIELD r_zmul01 MODIF ID mul.
*  SELECTION-SCREEN POSITION 18.
*  PARAMETER:  r_zmul02 RADIOBUTTON GROUP zmul MODIF ID mul.
*  SELECTION-SCREEN COMMENT (20) FOR FIELD r_zmul02 MODIF ID mul.
*  SELECTION-SCREEN POSITION 41.
*  PARAMETERS: r_zmul03 RADIOBUTTON GROUP zmul MODIF ID mul.
*  SELECTION-SCREEN COMMENT (20) FOR FIELD r_zmul03 MODIF ID mul.
*  SELECTION-SCREEN END OF LINE.
*
*  SELECTION-SCREEN BEGIN OF LINE.
*  SELECTION-SCREEN POSITION 5.
*  PARAMETERS: r_zmul04 RADIOBUTTON GROUP zmul MODIF ID mul.
*  SELECTION-SCREEN COMMENT (10) FOR FIELD r_zmul04 MODIF ID mul.
*
*  SELECTION-SCREEN POSITION 18.
*  PARAMETERS: r_zmul05 RADIOBUTTON GROUP zmul MODIF ID mul DEFAULT 'X'.
*  SELECTION-SCREEN COMMENT (20) FOR FIELD r_zmul05 MODIF ID mul.
*  SELECTION-SCREEN END OF LINE.
*
**--------------------------------------------------------------------
**For Field ZEX1
**--------------------------------------------------------------------
*  SELECTION-SCREEN BEGIN OF LINE.
*  PARAMETERS: r_zexc RADIOBUTTON GROUP rg1 MODIF ID rg1.
*  SELECTION-SCREEN COMMENT (6) FOR FIELD r_zexc MODIF ID rg1.
*  SELECTION-SCREEN POSITION 10.
*  PARAMETERS p_zexc(10) TYPE c MODIF ID rg1.
*  SELECTION-SCREEN COMMENT (10) FOR FIELD p_zexc MODIF ID rg1.
*  SELECTION-SCREEN COMMENT (10) FOR FIELD p_zmpl_d MODIF ID rg1.
*  PARAMETERS: p_zexc_d TYPE sy-datum MODIF ID rg1.
*  SELECTION-SCREEN END OF LINE.
*
*
**Selection for ZEX1 Key Combination
*  SELECTION-SCREEN BEGIN OF LINE.
*  SELECTION-SCREEN POSITION 5.
*  PARAMETERS: r_zexc01 RADIOBUTTON GROUP zexc MODIF ID exc.
*  SELECTION-SCREEN COMMENT (10) FOR FIELD r_zexc01 MODIF ID exc.
*  SELECTION-SCREEN POSITION 35.
*  PARAMETER:  r_zexc02 RADIOBUTTON GROUP zexc MODIF ID exc DEFAULT 'X'.
*  SELECTION-SCREEN COMMENT (20) FOR FIELD r_zexc02 MODIF ID exc.
*  SELECTION-SCREEN END OF LINE.
*
**--------------------------------------------------------------------
**For Field ZFRT
**--------------------------------------------------------------------
  SELECTION-SCREEN BEGIN OF LINE.
  PARAMETERS: r_zfrt RADIOBUTTON GROUP rg1 MODIF ID rg1.
  SELECTION-SCREEN COMMENT (6) FOR FIELD r_zfrt MODIF ID rg1.
  SELECTION-SCREEN POSITION 10.
  PARAMETERS p_zfrt(10) TYPE c MODIF ID rg1.
  SELECTION-SCREEN COMMENT (10) FOR FIELD p_zfrt MODIF ID rg1.
  SELECTION-SCREEN COMMENT (10) FOR FIELD p_zmpl_d MODIF ID rg1.
  PARAMETERS: p_zfrt_d TYPE sy-datum MODIF ID rg1.
  SELECTION-SCREEN END OF LINE.

*Selection for ZFRT Key Combination
  SELECTION-SCREEN BEGIN OF LINE.
  SELECTION-SCREEN POSITION 5.
  PARAMETERS: r_zfrt01 RADIOBUTTON GROUP zfrt MODIF ID frt USER-COMMAND rga.
  SELECTION-SCREEN COMMENT (25) FOR FIELD r_zfrt01 MODIF ID frt.
  SELECTION-SCREEN POSITION 35.
  PARAMETER:  r_zfrt02 RADIOBUTTON GROUP zfrt MODIF ID frt.
  SELECTION-SCREEN COMMENT (20) FOR FIELD r_zfrt02 MODIF ID frt.
  SELECTION-SCREEN POSITION 65.
  PARAMETERS: r_zfrt03 RADIOBUTTON GROUP zfrt MODIF ID frt.
  SELECTION-SCREEN COMMENT (20) FOR FIELD r_zfrt03 MODIF ID frt.
  SELECTION-SCREEN END OF LINE.

  SELECTION-SCREEN BEGIN OF LINE.
  SELECTION-SCREEN POSITION 5.
  PARAMETERS: r_zfrt04 RADIOBUTTON GROUP zfrt MODIF ID frt.
  SELECTION-SCREEN COMMENT (10) FOR FIELD r_zfrt04 MODIF ID frt.

  SELECTION-SCREEN POSITION 35.
  PARAMETERS: r_zfrt05 RADIOBUTTON GROUP zfrt MODIF ID frt DEFAULT 'X'.
  SELECTION-SCREEN COMMENT (20) FOR FIELD r_zfrt05 MODIF ID frt.
  SELECTION-SCREEN END OF LINE.

**--------------------------------------------------------------------
**For Field ZFCT
**--------------------------------------------------------------------
*  SELECTION-SCREEN BEGIN OF LINE.
*  PARAMETERS: r_zfct RADIOBUTTON GROUP rg1 MODIF ID rg1.
*  SELECTION-SCREEN COMMENT (6) FOR FIELD r_zfct MODIF ID rg1.
*  SELECTION-SCREEN POSITION 10.
*  PARAMETERS p_zfct(10) TYPE c MODIF ID rg1.
*  SELECTION-SCREEN COMMENT (10) FOR FIELD p_zfct MODIF ID rg1.
*  SELECTION-SCREEN COMMENT (10) FOR FIELD p_zmpl_d MODIF ID rg1.
*  PARAMETERS: p_zfct_d TYPE sy-datum MODIF ID rg1.
*  SELECTION-SCREEN END OF LINE.
*
**Selection for ZFCT Key Combination
*  SELECTION-SCREEN BEGIN OF LINE.
*  SELECTION-SCREEN POSITION 5.
*  PARAMETERS: r_zfct01 RADIOBUTTON GROUP zfct MODIF ID fct.
*  SELECTION-SCREEN COMMENT (25) FOR FIELD r_zfct01 MODIF ID fct.
*  SELECTION-SCREEN POSITION 35.
*  PARAMETER:  r_zfct02 RADIOBUTTON GROUP zfct MODIF ID fct.
*  SELECTION-SCREEN COMMENT (20) FOR FIELD r_zfct02 MODIF ID fct.
*  SELECTION-SCREEN POSITION 65.
*  SELECTION-SCREEN END OF LINE.
*
*  SELECTION-SCREEN BEGIN OF LINE.
*  SELECTION-SCREEN POSITION 5.
*  PARAMETERS: r_zfct03 RADIOBUTTON GROUP zfct MODIF ID fct.
*  SELECTION-SCREEN COMMENT (20) FOR FIELD r_zfct03 MODIF ID fct.
*
*  SELECTION-SCREEN POSITION 35.
*  PARAMETERS: r_zfct04 RADIOBUTTON GROUP zfct MODIF ID fct DEFAULT 'X'.
*  SELECTION-SCREEN COMMENT (20) FOR FIELD r_zfct04 MODIF ID fct.
*  SELECTION-SCREEN END OF LINE.
*
**--------------------------------------------------------------------
**For Field ZBUF
**--------------------------------------------------------------------
*  SELECTION-SCREEN BEGIN OF LINE.
**PARAMETERS: x_zbuf AS CHECKBOX DEFAULT space.
*  PARAMETERS: r_zbuf RADIOBUTTON GROUP rg1 MODIF ID rg1.
*  SELECTION-SCREEN COMMENT (6) FOR FIELD r_zbuf MODIF ID rg1.
*  SELECTION-SCREEN POSITION 10.
*  PARAMETERS p_zbuf(10) TYPE c MODIF ID rg1.
*  SELECTION-SCREEN COMMENT (10) FOR FIELD p_zbuf MODIF ID rg1.
*  SELECTION-SCREEN COMMENT (10) FOR FIELD p_zmpl_d MODIF ID rg1.
*  PARAMETERS: p_zbuf_d TYPE sy-datum MODIF ID rg1.
*  SELECTION-SCREEN END OF LINE.
*
**Selection for ZBUF Key Combination
*  SELECTION-SCREEN BEGIN OF LINE.
*  SELECTION-SCREEN POSITION 5.
*  PARAMETERS: r_zbuf01 RADIOBUTTON GROUP zbuf MODIF ID buf.
*  SELECTION-SCREEN COMMENT (25) FOR FIELD r_zbuf01 MODIF ID buf.
*  SELECTION-SCREEN POSITION 35.
*  PARAMETER:  r_zbuf02 RADIOBUTTON GROUP zbuf MODIF ID buf.
*  SELECTION-SCREEN COMMENT (20) FOR FIELD r_zbuf02 MODIF ID buf.
*  SELECTION-SCREEN POSITION 65.
*  PARAMETERS: r_zbuf03 RADIOBUTTON GROUP zbuf MODIF ID buf.
*  SELECTION-SCREEN COMMENT (20) FOR FIELD r_zbuf03 MODIF ID buf.
*  SELECTION-SCREEN END OF LINE.
*
*  SELECTION-SCREEN BEGIN OF LINE.
*  SELECTION-SCREEN POSITION 5.
*  PARAMETERS: r_zbuf04 RADIOBUTTON GROUP zbuf MODIF ID buf.
*  SELECTION-SCREEN COMMENT (10) FOR FIELD r_zbuf04 MODIF ID buf.
*
*  SELECTION-SCREEN POSITION 35.
*  PARAMETERS: r_zbuf05 RADIOBUTTON GROUP zbuf MODIF ID buf DEFAULT 'X'.
*  SELECTION-SCREEN COMMENT (20) FOR FIELD r_zbuf05 MODIF ID buf.
*  SELECTION-SCREEN END OF LINE.
*
*
**--------------------------------------------------------------------
**For Field ZBFT
**--------------------------------------------------------------------
*  SELECTION-SCREEN BEGIN OF LINE.
**PARAMETERS: x_zbft AS CHECKBOX DEFAULT space.
*  PARAMETERS: r_zbft RADIOBUTTON GROUP rg1 MODIF ID rg1.
*  SELECTION-SCREEN COMMENT (6) FOR FIELD r_zbft MODIF ID rg1.
*  SELECTION-SCREEN POSITION 10.
*  PARAMETERS p_zbft(10) TYPE c MODIF ID rg1.
*  SELECTION-SCREEN COMMENT (10) FOR FIELD p_zbft MODIF ID rg1.
*  SELECTION-SCREEN COMMENT (10) FOR FIELD p_zmpl_d MODIF ID rg1.
*  PARAMETERS: p_zbft_d TYPE sy-datum MODIF ID rg1.
*  SELECTION-SCREEN END OF LINE.
*
**Selection for ZBFT Key Combination
*  SELECTION-SCREEN BEGIN OF LINE.
*  SELECTION-SCREEN POSITION 5.
*  PARAMETERS: r_zbft01 RADIOBUTTON GROUP zbft MODIF ID bft.
*  SELECTION-SCREEN COMMENT (25) FOR FIELD r_zbft01 MODIF ID bft.
*  SELECTION-SCREEN POSITION 35.
*  PARAMETER:  r_zbft02 RADIOBUTTON GROUP zbft MODIF ID bft.
*  SELECTION-SCREEN COMMENT (20) FOR FIELD r_zbft02 MODIF ID bft.
*  SELECTION-SCREEN POSITION 65.
*  SELECTION-SCREEN END OF LINE.
*
*  SELECTION-SCREEN BEGIN OF LINE.
*  SELECTION-SCREEN POSITION 5.
*  PARAMETERS: r_zbft03 RADIOBUTTON GROUP zbft MODIF ID bft.
*  SELECTION-SCREEN COMMENT (20) FOR FIELD r_zbft03 MODIF ID bft.
*
*  SELECTION-SCREEN POSITION 35.
*  PARAMETERS: r_zbft04 RADIOBUTTON GROUP zbft MODIF ID bft DEFAULT 'X'.
*  SELECTION-SCREEN COMMENT (20) FOR FIELD r_zbft04 MODIF ID bft.
*  SELECTION-SCREEN END OF LINE.

*--------------------------------------------------------------------
*For Field ZDIS
*--------------------------------------------------------------------
  SELECTION-SCREEN BEGIN OF LINE.
  PARAMETERS: r_zdis RADIOBUTTON GROUP rg1 MODIF ID rg1.
  SELECTION-SCREEN COMMENT (6) FOR FIELD r_zdis MODIF ID rg1.
  SELECTION-SCREEN POSITION 10.
  PARAMETERS p_zdis(10) TYPE c MODIF ID rg1.
  SELECTION-SCREEN COMMENT (10) FOR FIELD p_zdis MODIF ID rg1.
  SELECTION-SCREEN COMMENT (10) FOR FIELD p_zmpl_d MODIF ID rg1.
  PARAMETERS: p_zdis_d TYPE sy-datum MODIF ID rg1.
  SELECTION-SCREEN END OF LINE.

*Selection for ZDIS Key Combination
  SELECTION-SCREEN BEGIN OF LINE.
  SELECTION-SCREEN POSITION 5.
  PARAMETERS: r_zdis01 RADIOBUTTON GROUP zdis MODIF ID dis USER-COMMAND rga.
  SELECTION-SCREEN COMMENT (25) FOR FIELD r_zdis01 MODIF ID dis.
  SELECTION-SCREEN POSITION 35.
  PARAMETER:  r_zdis02 RADIOBUTTON GROUP zdis MODIF ID dis.
  SELECTION-SCREEN COMMENT (30) FOR FIELD r_zdis02 MODIF ID dis.
  SELECTION-SCREEN END OF LINE.

  SELECTION-SCREEN BEGIN OF LINE.
  SELECTION-SCREEN POSITION 5.
  PARAMETERS: r_zdis03 RADIOBUTTON GROUP zdis MODIF ID dis.
  SELECTION-SCREEN COMMENT (20) FOR FIELD r_zdis03 MODIF ID dis.
  SELECTION-SCREEN POSITION 35.
  PARAMETERS: r_zdis04 RADIOBUTTON GROUP zdis MODIF ID dis.
  SELECTION-SCREEN COMMENT (30) FOR FIELD r_zdis04 MODIF ID dis.

  SELECTION-SCREEN END OF LINE.

  SELECTION-SCREEN BEGIN OF LINE.
  SELECTION-SCREEN POSITION 5.
  PARAMETERS: r_zdis05 RADIOBUTTON GROUP zdis MODIF ID dis.
  SELECTION-SCREEN COMMENT (25) FOR FIELD r_zdis05 MODIF ID dis.
  SELECTION-SCREEN POSITION 35.
  PARAMETERS: r_zdis06 RADIOBUTTON GROUP zdis MODIF ID dis DEFAULT 'X'.
  SELECTION-SCREEN COMMENT (30) FOR FIELD r_zdis06 MODIF ID dis.
  SELECTION-SCREEN END OF LINE.

  SELECTION-SCREEN SKIP.
*--------------------------------------------------------------------
*For Selection Screen Download File
*--------------------------------------------------------------------
*Blocks for user using excel as inputs for sales number
  PARAMETERS: x_file AS CHECKBOX DEFAULT space.
  PARAMETERS: p_file TYPE string.
  SELECTION-SCREEN COMMENT /1(79) text002.

  SELECTION-SCREEN SKIP.
  SELECTION-SCREEN COMMENT /1(79) text001.
  PARAMETERS: x_updpri  AS CHECKBOX  DEFAULT space.
  SELECTION-SCREEN END OF BLOCK a1.

*--------------------------------------------------------------------
*For Selection Screen ZVSL03
*--------------------------------------------------------------------
  SELECTION-SCREEN BEGIN OF BLOCK b1 WITH FRAME TITLE text-002.
  PARAMETERS: p_vkorg TYPE tvko-vkorg  DEFAULT '1010' MODIF ID zvs,
              p_werks TYPE t001w-werks DEFAULT '1010' MODIF ID zvs,
              p_vtweg TYPE tvtw-vtweg     MODIF ID z08.

  SELECT-OPTIONS: s_matnr FOR mvke-matnr  MODIF ID z01.
  PARAMETERS:     p_kunnr TYPE knvv-kunnr MODIF ID z02.
  SELECT-OPTIONS: s_extwg FOR mara-extwg  MODIF ID z03.
  SELECT-OPTIONS: s_prdha FOR mara-prdha  MODIF ID z04.
  PARAMETERS:     p_lgort TYPE mard-lgort MODIF ID z05.
  SELECT-OPTIONS: s_matkl FOR mara-matkl  MODIF ID z06.

  PARAMETERS:     p_date TYPE datum   DEFAULT sy-datum MODIF ID zvs,
                  p_waers TYPE waers  DEFAULT 'SGD' MODIF ID zvs,
                  p_inco  TYPE inco1      MODIF ID z07.
  SELECTION-SCREEN END OF BLOCK b1.

*&---------------------------------------------------------------------*
*& AT SELECTION-SCREEN
*&---------------------------------------------------------------------*
AT SELECTION-SCREEN.

*IF radiobutton is changed, below validation should not be checked,
*only when "Enter" key is clicked or F8
  IF sy-ucomm EQ 'RGA'.
    CLEAR sy-ucomm.
    EXIT.
  ENDIF.

  IF r_act01 EQ abap_true.
    IF p_vkorg IS INITIAL.
      MESSAGE e000(zc903) WITH 'Please enter the Sales Organisation'.
    ENDIF.

    IF p_werks IS INITIAL.
      MESSAGE e000(zc903) WITH 'Please enter the Plants'.
    ENDIF.

    IF p_waers IS INITIAL.
      MESSAGE e000(zc903) WITH 'Please enter the Currency'.
    ENDIF.

*Validation on the Mandatory field depending on the Condition Selected.
    IF r_zmpl EQ abap_true.
      IF p_zmpl IS INITIAL.
        MESSAGE e000(zc903) WITH 'Please enter % change for ZMPL'.
      ENDIF.
      IF p_zmpl_d IS INITIAL.
        MESSAGE e000(zc903) WITH 'Please enter date for ZMPL'.
      ENDIF.
    ENDIF.

*    IF r_zmul EQ abap_true.
*      IF p_zmul IS INITIAL.
*        MESSAGE e000(zc903) WITH 'Please enter a value for ZMUL'.
*      ENDIF.
*      IF p_zmul_d IS INITIAL.
*        MESSAGE e000(zc903) WITH 'Please enter date for ZMUL'.
*      ENDIF.
*    ENDIF.

*    IF r_zexc EQ abap_true.
*      IF p_zexc IS INITIAL.
*        MESSAGE e000(zc903) WITH 'Please enter a value for ZEX1'.
*      ENDIF.
*      IF p_zexc_d IS INITIAL.
*        MESSAGE e000(zc903) WITH 'Please enter date for ZEX1'.
*      ENDIF.
*    ENDIF.
*
    IF r_zfrt EQ abap_true.
      IF p_zfrt IS INITIAL.
        MESSAGE e000(zc903) WITH 'Please enter a value for ZFRT'.
      ENDIF.
      IF p_zfrt_d IS INITIAL.
        MESSAGE e000(zc903) WITH 'Please enter date for ZFRT'.
      ENDIF.
    ENDIF.
*
*    IF r_zfct EQ abap_true.
*      IF p_zfct IS INITIAL.
*        MESSAGE e000(zc903) WITH 'Please enter a value for ZFCT'.
*      ENDIF.
*      IF p_zfct_d IS INITIAL.
*        MESSAGE e000(zc903) WITH 'Please enter date for ZFCT'.
*      ENDIF.
*    ENDIF.
*
*    IF r_zbuf EQ abap_true.
*      IF p_zbuf IS INITIAL.
*        MESSAGE e000(zc903) WITH 'Please enter a value for ZBUF'.
*      ENDIF.
*      IF p_zbuf_d IS INITIAL.
*        MESSAGE e000(zc903) WITH 'Please enter date for ZBUF'.
*      ENDIF.
*    ENDIF.

    IF r_zdis EQ abap_true.
      IF p_zdis IS INITIAL.
        MESSAGE e000(zc903) WITH 'Please enter a value for ZDIS'.
      ENDIF.
      IF p_zdis_d IS INITIAL.
        MESSAGE e000(zc903) WITH 'Please enter date for ZDIS'.
      ENDIF.
    ENDIF.

    IF sy-ucomm EQ 'ONLI'.
      PERFORM check_screen.
    ENDIF.
  ENDIF.

  IF x_file EQ abap_true
    AND p_file IS INITIAL.
    MESSAGE e000(zc903) WITH 'Please enter the folder path'.
  ENDIF.

*&---------------------------------------------------------------------*
*& AT SELECTION-SCREEN OUTPUT
*&---------------------------------------------------------------------*
AT SELECTION-SCREEN OUTPUT.
  text001  = 'Select the checkbox to update only when you are confident with the data'.
  text002  = 'A folder shall be created for the result generated'.
  text003  = 'Select at least one field below (for decrease include "-" infront)'.
  texth001 = 'Price markup based on'.

*Selection Screen, hide all the unnecessary fields
  PERFORM hide_screen.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_file.

  CALL METHOD cl_gui_frontend_services=>directory_browse
    CHANGING
      selected_folder      = p_file
    EXCEPTIONS
      cntl_error           = 1
      error_no_gui         = 2
      not_supported_by_gui = 3
      OTHERS               = 4.

*----------------------------------------------------------------------*
* START-OF-SELECTION
*----------------------------------------------------------------------*
START-OF-SELECTION.
*Retrieve Data
  PERFORM get_data.

*Process the Information
  PERFORM process_data.

*Converting to Excel
  PERFORM convert_data.

*Update for BDC in VK11
  PERFORM update_price.

*ALV Display
  PERFORM display_alv.

*&---------------------------------------------------------------------*
*&      Form  GET_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM get_data .

  DATA: s_kschl TYPE RANGE OF kscha WITH HEADER LINE.
  DATA: count TYPE i VALUE 0.

  DATA: lv_knumh(100).

  CLEAR: g_table.

  IF r_act01 EQ abap_true.
    UNASSIGN <condition_table>.
    FREE: s_kschl.
*Conditions
    s_kschl-sign = 'I'.
    s_kschl-option = 'EQ'.
    IF r_zmpl EQ abap_true.
      s_kschl-low = 'ZMPL'.
    ENDIF.
*    IF r_zmul EQ abap_true.
*      s_kschl-low = 'ZMUL'.
*    ENDIF.
*    IF r_zexc EQ abap_true.
*      s_kschl-low = 'ZEX1'.
*    ENDIF.
    IF r_zfrt EQ abap_true.
      s_kschl-low = 'ZFRT'.
    ENDIF.
*    IF r_zfct EQ abap_true.
*      s_kschl-low = 'ZFCT'.
*    ENDIF.
*    IF r_zbuf EQ abap_true.
*      s_kschl-low = 'ZBUF'.
*    ENDIF.
*    IF r_zbft EQ abap_true.
*      s_kschl-low = 'ZBFT'.
*    ENDIF.
    IF r_zdis EQ abap_true.
      s_kschl-low = 'ZDIS'.
    ENDIF.
    APPEND s_kschl.

*--------------------------------*
*** Retrieve Condition Value ***
*--------------------------------*
*--------------------------------
*Table A004
*Material
*ZMPL02 / ZMUL02 / ZBFT02 / ZFCT02
*--------------------------------
    IF ( r_zmpl EQ abap_true AND r_zmpl02 EQ abap_true ).
*    OR ( r_zmul EQ abap_true AND r_zmul02 EQ abap_true )
*    OR ( r_zfct EQ abap_true AND r_zfct02 EQ abap_true )
*    OR ( r_zbft EQ abap_true AND r_zbft02 EQ abap_true ).

      g_table = 'A004'.

*--------------------------------
*Table A005
*Customer/Material
*ZMPL01 / ZMUL01
*--------------------------------
    ELSEIF ( r_zmpl EQ abap_true AND r_zmpl01 EQ abap_true ).
*        OR ( r_zmul EQ abap_true AND r_zmul01 EQ abap_true ).

      g_table = 'A005'.

*--------------------------------
*Table A118
*"Empties" Price (Material-Dependent)
*ZMPL05 / ZMUL05
*--------------------------------
    ELSEIF ( r_zmpl EQ abap_true AND r_zmpl05 EQ abap_true ).
*        OR ( r_zmul EQ abap_true AND r_zmul05 EQ abap_true ).

      g_table = 'A118'.

*--------------------------------
*Table A802
*Sales Org./Material
*ZMPL02 / ZMUL02 / ZFCT03 / ZBFT03 /
*--------------------------------
    ELSEIF ( r_zmpl EQ abap_true AND r_zmpl04 EQ abap_true )
*        OR ( r_zmul EQ abap_true AND r_zmul04 EQ abap_true )
*        OR ( r_zfct EQ abap_true AND r_zfct03 EQ abap_true )
*        OR ( r_zbft EQ abap_true AND r_zbft03 EQ abap_true )
        OR ( r_zdis EQ abap_true AND r_zdis04 EQ abap_true ).

      g_table = 'A802'.

*--------------------------------
*Table A804
*Sales Org./Currency/Material
*ZMPL03 / ZMUL03
*--------------------------------
    ELSEIF ( r_zmpl EQ abap_true AND r_zmpl03 EQ abap_true ).
*        OR ( r_zmul EQ abap_true AND r_zmul03 EQ abap_true ).

      g_table = 'A804'.

*--------------------------------
*Table A809
*Sales Org / Material Group
*ZFCT04 / ZBFT04
*--------------------------------
*    ELSEIF ( r_zfct EQ abap_true AND r_zfct04 EQ abap_true )
*        OR ( r_zbft EQ abap_true AND r_zbft04 EQ abap_true ).
*
*      g_table = 'A809'.

*--------------------------------
*Table A903
*Sales Org / CondCurr / Currency
*--------------------------------
*ZEXC02
*--------------------------------
*    ELSEIF ( r_zexc EQ abap_true AND r_zexc02 EQ abap_true ).
*
*      g_table = 'A903'.

*--------------------------------
*Table A904
*Sales Org/ CondCurr / Currency / Material
*ZEXC01
*--------------------------------
*    ELSEIF ( r_zexc EQ abap_true AND r_zexc01 EQ abap_true ).
*
*      g_table = 'A904'.

*--------------------------------
*Table A920
*Sales Org/Distr. Chl/Plant/ Incoterms /Material
*ZBUF01 / ZFRT01
*--------------------------------
    ELSEIF ( r_zfrt EQ abap_true AND r_zfrt01 EQ abap_true ).
*        OR ( r_zbuf EQ abap_true AND r_zbuf01 EQ abap_true ).

      g_table = 'A920'.

*--------------------------------
*Table A921
*Sales Org/Distr. Chl/Incoterms/Material
*ZFRT02 / ZBUF02
*--------------------------------
    ELSEIF ( r_zfrt EQ abap_true AND r_zfrt02 EQ abap_true ).
*        OR ( r_zbuf EQ abap_true AND r_zbuf02 EQ abap_true ).

      g_table = 'A921'.

*--------------------------------
*Table A922
*Sales Org/ Plant / Incoterms / Material
*ZFRT03 / ZBUF03
*--------------------------------
    ELSEIF ( r_zfrt EQ abap_true AND r_zfrt03 EQ abap_true ).
*        OR ( r_zbuf EQ abap_true AND r_zbuf03 EQ abap_true ).
*
      g_table = 'A922'.

*--------------------------------
*Table A923
*Sales Org / Incoterms / Material
*ZBUF04 / ZFRT04
*--------------------------------
    ELSEIF ( r_zfrt EQ abap_true AND r_zfrt04 EQ abap_true ).
*        OR ( r_zbuf EQ abap_true AND r_zbuf04 EQ abap_true ).
*
      g_table = 'A923'.

*--------------------------------
*Table A924
*Sales Org / Customer / Brand / Material Group
*ZDIS02
*--------------------------------
    ELSEIF ( r_zdis EQ abap_true AND r_zdis02 EQ abap_true ).

      g_table = 'A924'.

*--------------------------------
*Table A925
*Sales Org / Customer / Material
*ZDIS01 / ZBFT01 / ZFCT01
*--------------------------------
*    ELSEIF ( r_zfct EQ abap_true AND r_zfct01 EQ abap_true )
*        OR ( r_zbft EQ abap_true AND r_zbft01 EQ abap_true )
    ELSEIF ( r_zdis EQ abap_true AND r_zdis01 EQ abap_true ).

      g_table = 'A925'.

*--------------------------------
*Table A927
*Sales Org / Incoterms / Brand
*ZFRT05 / ZBUF05
*--------------------------------
    ELSEIF ( r_zfrt EQ abap_true AND r_zfrt05 EQ abap_true ).
*        OR ( r_zbuf EQ abap_true AND r_zbuf05 EQ abap_true ).

      g_table = 'A927'.

*--------------------------------
*Table A928
*Sales Org / Customer / Brand
*ZDIS03
*--------------------------------
    ELSEIF ( r_zdis EQ abap_true AND r_zdis03 EQ abap_true ).

      g_table = 'A928'.

*--------------------------------
*Table A929
*Sales Org / Brand
*ZDIS06
*--------------------------------
    ELSEIF ( r_zdis EQ abap_true AND r_zdis06 EQ abap_true ).

      g_table = 'A929'.

*--------------------------------
*Table A930
*Sales Org / Brand / Material Group
*--------------------------------
    ELSEIF ( r_zdis EQ abap_true AND r_zdis05 EQ abap_true ).

      g_table = 'A930'.

    ENDIF.

*--------------------------------------------------
*Check the table status
*--------------------------------------------------
    CASE g_table.
      WHEN 'A004'.
        FREE: it_a004.
        SELECT * FROM a004
          INTO TABLE it_a004
          WHERE kschl IN s_kschl
            AND vkorg EQ p_vkorg
            AND matnr IN s_matnr
            AND datbi GE p_date
            AND datab LE p_date.

        IF it_a004[] IS NOT INITIAL.
*To remove the entries that does not belong to the specify Distribution Channel
          IF p_vtweg NE space.
            DELETE it_a004 WHERE vtweg NE p_vtweg.
          ENDIF.

          ASSIGN it_a004[] TO <condition_table>.
        ENDIF.

      WHEN 'A005'.
        FREE: it_a005.
        SELECT * FROM a005
          INTO TABLE it_a005
          WHERE kschl IN s_kschl
            AND vkorg EQ p_vkorg
            AND matnr IN s_matnr
            AND datbi GE p_date
            AND datab LE p_date.

        IF it_a005[] IS NOT INITIAL.
*To remove the entries that does not belong to the specify Customer
          IF p_kunnr NE space.
            DELETE it_a005 WHERE kunnr NE p_kunnr.
          ENDIF.
*To remove the entries that does not belong to the specify Distribution Channel
          IF p_vtweg NE space.
            DELETE it_a005 WHERE vtweg NE p_vtweg.
          ENDIF.

          ASSIGN it_a005[] TO <condition_table>.
        ENDIF.

      WHEN 'A118'.
        FREE: it_a118.
*        SELECT a~mandt
*               a~kappl
*               a~kschl
*               a~matnr
*               a~datbi
*               a~datab
*               a~knumh FROM a118 AS a
*          INNER JOIN mara AS b
*          ON b~matnr EQ a~matnr
*          INTO TABLE it_a118
*          WHERE a~kschl IN s_kschl
*            AND a~matnr IN s_matnr
*            AND a~datbi GE p_date
*            AND a~datab LE p_date
*            AND b~matkl IN s_matkl
*            AND b~prdha IN s_prdha
*            AND b~extwg IN s_extwg.
        SELECT * FROM a118
          INTO TABLE it_a118
          WHERE kschl IN s_kschl
            AND matnr IN s_matnr
            AND datbi GE p_date
            AND datab LE p_date.


        IF it_a118[] IS NOT INITIAL.
          ASSIGN it_a118[] TO <condition_table>.
        ENDIF.

      WHEN 'A802'.
        FREE: it_a802.
        SELECT * FROM a802
          INTO TABLE it_a802
          WHERE kschl IN s_kschl
            AND vkorg EQ p_vkorg
            AND matnr IN s_matnr
            AND datbi GE p_date
            AND datab LE p_date.

        IF it_a802[] IS NOT INITIAL.
          ASSIGN it_a802[] TO <condition_table>.
        ENDIF.

      WHEN 'A804'.
        FREE: it_a804.
        SELECT * FROM a804
          INTO TABLE it_a804
          WHERE kschl IN s_kschl
            AND vkorg EQ p_vkorg
            AND waerk EQ p_waers
            AND matnr IN s_matnr
            AND datbi GE p_date
            AND datab LE p_date.

        IF it_a804[] IS NOT INITIAL.
          ASSIGN it_a804[] TO <condition_table>.
        ENDIF.

      WHEN 'A809'.
        FREE: it_a809.
        SELECT * FROM a809
          INTO TABLE it_a809
          WHERE kschl IN s_kschl
            AND vkorg EQ p_vkorg
            AND matkl IN s_matkl
            AND datbi GE p_date
            AND datab LE p_date.

        IF it_a809[] IS NOT INITIAL.
          ASSIGN it_a809[] TO <condition_table>.
        ENDIF.

      WHEN 'A903'.
        FREE: it_a903.
        SELECT * FROM a903
          INTO TABLE it_a903
          WHERE kschl IN s_kschl
            AND vkorg EQ p_vkorg
            AND waerk EQ p_waers
            AND datbi GE p_date
            AND datab LE p_date.

        IF it_a903[] IS NOT INITIAL.
          ASSIGN it_a903[] TO <condition_table>.
        ENDIF.

      WHEN 'A904'.
        FREE: it_a904.
        SELECT * FROM a904
          INTO TABLE it_a904
          WHERE kschl IN s_kschl
            AND vkorg EQ p_vkorg
            AND waerk EQ p_waers
            AND matnr IN s_matnr
            AND datbi GE p_date
            AND datab LE p_date.

        IF it_a904[] IS NOT INITIAL.
          ASSIGN it_a904[] TO <condition_table>.
        ENDIF.

      WHEN 'A920'.
        FREE: it_a920.
        SELECT * FROM a920
          INTO TABLE it_a920
          WHERE kschl IN s_kschl
            AND vkorg EQ p_vkorg
            AND werks EQ p_werks
            AND matnr IN s_matnr
            AND datbi GE p_date
            AND datab LE p_date.

        IF it_a920[] IS NOT INITIAL.
*Incoterms
          IF p_inco NE space.
            DELETE it_a920 WHERE inco1 NE p_inco.
          ENDIF.
*Distribution Channel
          IF p_vtweg NE space.
            DELETE it_a920 WHERE vtweg NE p_vtweg.
          ENDIF.
          ASSIGN it_a920[] TO <condition_table>.
        ENDIF.

      WHEN 'A921'.
        FREE: it_a921.
        SELECT * FROM a921
          INTO TABLE it_a921
          WHERE kschl IN s_kschl
            AND vkorg EQ p_vkorg
            AND matnr IN s_matnr
            AND datbi GE p_date
            AND datab LE p_date.

        IF it_a921[] IS NOT INITIAL.
*Incoterms
          IF p_inco NE space.
            DELETE it_a921 WHERE inco1 NE p_inco.
          ENDIF.
*Distribution Channel
          IF p_vtweg NE space.
            DELETE it_a921 WHERE vtweg NE p_vtweg.
          ENDIF.
          ASSIGN it_a921[] TO <condition_table>.
        ENDIF.

      WHEN 'A922'.
        FREE: it_a922.
        SELECT * FROM a922
          INTO TABLE it_a922
          WHERE kschl IN s_kschl
            AND vkorg EQ p_vkorg
            AND werks EQ p_werks
            AND matnr IN s_matnr
            AND datbi GE p_date
            AND datab LE p_date.

        IF it_a922[] IS NOT INITIAL.
*Incoterms
          IF p_inco NE space.
            DELETE it_a922 WHERE inco1 NE p_inco.
          ENDIF.
          ASSIGN it_a922[] TO <condition_table>.
        ENDIF.

      WHEN 'A923'.
        FREE: it_a923.
        SELECT * FROM a923
          INTO TABLE it_a923
          WHERE kschl IN s_kschl
            AND vkorg EQ p_vkorg
            AND matnr IN s_matnr
            AND datbi GE p_date
            AND datab LE p_date.

        IF it_a923[] IS NOT INITIAL.
*Incoterms
          IF p_inco NE space.
            DELETE it_a923 WHERE inco1 NE p_inco.
          ENDIF.
          ASSIGN it_a923[] TO <condition_table>.
        ENDIF.

      WHEN 'A924'.
        FREE: it_a924.
        SELECT * FROM a924
          INTO TABLE it_a924
          WHERE kschl IN s_kschl
            AND vkorg EQ p_vkorg
            AND extwg IN s_extwg
            AND matkl IN s_matkl
            AND datbi GE p_date
            AND datab LE p_date.

        IF it_a924[] IS NOT INITIAL.
          IF p_kunnr NE space.
            DELETE it_a924 WHERE kunnr NE p_kunnr.
          ENDIF.
          ASSIGN it_a924[] TO <condition_table>.
        ENDIF.

      WHEN 'A925'.
        FREE: it_a925.
        SELECT * FROM a925
          INTO TABLE it_a925
          WHERE kschl IN s_kschl
            AND vkorg EQ p_vkorg
            AND matnr IN s_matnr
            AND datbi GE p_date
            AND datab LE p_date.

        IF it_a925[] IS NOT INITIAL.
*To remove the entries that does not belong to the specify Customer
          IF p_kunnr NE space.
            DELETE it_a925 WHERE kunnr NE p_kunnr.
          ENDIF.
          ASSIGN it_a925[] TO <condition_table>.
        ENDIF.

      WHEN 'A927'.
        FREE: it_a927.
        SELECT * FROM a927
          INTO TABLE it_a927
          WHERE kschl IN s_kschl
            AND vkorg EQ p_vkorg
            AND extwg IN s_extwg
            AND datbi GE p_date
            AND datab LE p_date.

        IF it_a927[] IS NOT INITIAL.
*Incoterms
          IF p_inco NE space.
            DELETE it_a927 WHERE inco1 NE p_inco.
          ENDIF.
          ASSIGN it_a927[] TO <condition_table>.
        ENDIF.

      WHEN 'A928'.
        FREE: it_a928.
        SELECT * FROM a928
          INTO TABLE it_a928
          WHERE kschl IN s_kschl
            AND vkorg EQ p_vkorg
            AND extwg IN s_extwg
            AND datbi GE p_date
            AND datab LE p_date.

        IF it_a928[] IS NOT INITIAL.
          IF p_kunnr NE space.
            DELETE it_a928 WHERE kunnr NE p_kunnr.
          ENDIF.
          ASSIGN it_a928[] TO <condition_table>.
        ENDIF.

      WHEN 'A929'.
        FREE: it_a929.
        SELECT * FROM a929
          INTO TABLE it_a929
          WHERE kschl IN s_kschl
            AND vkorg EQ p_vkorg
            AND extwg IN s_extwg
            AND datbi GE p_date
            AND datab LE p_date.

        IF it_a929[] IS NOT INITIAL.
          ASSIGN it_a929[] TO <condition_table>.
        ENDIF.

      WHEN 'A930'.
        FREE: it_a930.
        SELECT * FROM a930
          INTO TABLE it_a930
          WHERE kschl IN s_kschl
            AND vkorg EQ p_vkorg
            AND extwg IN s_extwg
            AND matkl IN s_matkl
            AND datbi GE p_date
            AND datab LE p_date.

        IF it_a930[] IS NOT INITIAL.
          ASSIGN it_a930[] TO <condition_table>.
        ENDIF.
    ENDCASE.
  ENDIF.

*Get data from KONP, no matter what condition table it from
  IF <condition_table> IS ASSIGNED.

    FREE: it_konp.
    lv_knumh = 'KNUMH = <condition_table>-KNUMH'.
    SELECT * FROM konp
      INTO  TABLE it_konp
      FOR ALL ENTRIES IN <condition_table>
      WHERE (lv_knumh).
  ENDIF.

*Only retreived ZVSL03 if only ZMPL is selected.
**  IF r_zmpl EQ abap_true.
*    IF s_matnr[] IS INITIAL.
*      LOOP AT <condition_table> ASSIGNING <cond_table>.
*        IF <cond_table> IS NOT ASSIGNED AND
*           <matnr> IS NOT ASSIGNED.
*          ASSIGN COMPONENT 'MATNR' OF STRUCTURE <cond_table> TO <matnr>.
*        ENDIF.
*
*        CLEAR: s_matnr.
*        s_matnr-sign = 'I'.
*        s_matnr-option = 'EQ'.
*        s_matnr-low = <matnr>.
*        APPEND s_matnr.
*      ENDLOOP.
*    ENDIF.

***For changing the type.
***Brands
**    LOOP AT s_extwg.
**      it_extwg-sign = s_extwg-sign.
**      it_extwg-option = s_extwg-option.
**      it_extwg-low = s_extwg-low.
**      it_extwg-high = s_extwg-high.
**      APPEND it_extwg.
**    ENDLOOP.
**
***Material Group
**    LOOP AT s_prdha.
**      it_prdha-sign = s_prdha-sign.
**      it_prdha-option = s_prdha-option.
**      it_prdha-low = s_prdha-low.
**      it_prdha-high = s_prdha-high.
**      APPEND it_prdha.
**    ENDLOOP.
**
***Customised Function Module for calling ZVSL03 Program
**    CALL FUNCTION 'Z_FV_GET_ZVSL03'
**      EXPORTING
**        i_vkorg        = p_vkorg
**        i_werks        = p_werks
***       I_MATNR        =
**        i_kunnr        = p_kunnr
***       I_EXTWG        =
***       I_PRDHA        =
**        i_lgort        = p_lgort
***       I_MATKL        =
**        i_date         = p_date
**        i_waers        = p_waers
**        i_inco         = p_inco
***     IMPORTING
***       ERROR_MSG      =
**      TABLES
**        it_report      = it_zvsl03
**        it_matnr       = s_matnr
**        it_extwg       = it_extwg
**        it_prdha       = it_prdha
**        it_matkl       = s_matkl
**      EXCEPTIONS
**        invalid_inputs = 1
**        OTHERS         = 2.
**
**    IF sy-subrc <> 0.
*** Implement suitable error handling here
**    ELSE.
***Ensure only 1 Material Number appears only.
**      SORT it_zvsl03 BY matnr.
**      DELETE ADJACENT DUPLICATES FROM it_zvsl03
**             COMPARING matnr.
**    ENDIF.
**  ENDIF.

  FREE: it_mat.
  SELECT a~matnr
         a~matkl
         a~prdha
         a~extwg
         b~werks
         c~maktx
    FROM mara AS a
    INNER JOIN marc AS b
    ON a~matnr EQ b~matnr
    INNER JOIN makt AS c
    ON a~matnr EQ c~matnr
    INTO TABLE it_mat
    WHERE a~matnr IN s_matnr
      AND a~matkl IN s_matkl
      AND a~prdha IN s_prdha
      AND a~extwg IN s_extwg
      AND a~lvorm EQ space
      AND b~werks EQ p_werks
      AND b~lvorm EQ space.

ENDFORM.                    " GET_DATA
*&---------------------------------------------------------------------*
*&      Form  PROCESS_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM process_data .

  "DATA: "lv_flag     TYPE c,
  "lv_konwa    TYPE konwa,
  "lv_zfrt     TYPE zvs_zvsl03-zfrt,
  "lv_table(4) TYPE c,
  "lv_knumh    TYPE konp-knumh,
  "lv_kbetr TYPE zvs_zvsl03-zmpl.

  IF r_act01 EQ abap_true.
    CHECK <condition_table>[] IS NOT INITIAL.

    UNASSIGN: <field>,
              <old_field>,
              <cond_table>.

    CASE abap_true.
      WHEN r_zmpl.
        ASSIGN COMPONENT 'ZMPL_N' OF STRUCTURE wa_zvsl03 TO <field>.
        ASSIGN COMPONENT 'ZMPL' OF STRUCTURE wa_zvsl03 TO <old_field>.
*      WHEN r_zmul.
*        ASSIGN COMPONENT 'ZMUL_N' OF STRUCTURE wa_zvsl03 TO <field>.
*        ASSIGN COMPONENT 'ZMUL' OF STRUCTURE wa_zvsl03 TO <old_field>.
*      WHEN r_zexc.
*        ASSIGN COMPONENT 'ZEX1_N' OF STRUCTURE wa_zvsl03 TO <field>.
*        ASSIGN COMPONENT 'ZEX1' OF STRUCTURE wa_zvsl03 TO <old_field>.
      WHEN r_zfrt.
        ASSIGN COMPONENT 'ZFRT_N' OF STRUCTURE wa_zvsl03 TO <field>.
        ASSIGN COMPONENT 'ZFRT' OF STRUCTURE wa_zvsl03 TO <old_field>.
*      WHEN r_zfct.
*        ASSIGN COMPONENT 'ZFCT_N' OF STRUCTURE wa_zvsl03 TO <field>.
*        ASSIGN COMPONENT 'ZFCT' OF STRUCTURE wa_zvsl03 TO <old_field>.
*      WHEN r_zbuf.
*        ASSIGN COMPONENT 'ZBUF_N' OF STRUCTURE wa_zvsl03 TO <field>.
*        ASSIGN COMPONENT 'ZBUF' OF STRUCTURE wa_zvsl03 TO <old_field>.
*      WHEN r_zbft.
*        ASSIGN COMPONENT 'ZBFT_N' OF STRUCTURE wa_zvsl03 TO <field>.
*        ASSIGN COMPONENT 'ZBFT' OF STRUCTURE wa_zvsl03 TO <old_field>.
      WHEN r_zdis.
        ASSIGN COMPONENT 'ZDIS_N' OF STRUCTURE wa_zvsl03 TO <field>.
        ASSIGN COMPONENT 'ZDIS' OF STRUCTURE wa_zvsl03 TO <old_field>.
    ENDCASE.

    FREE: it_zvsl03_n.

    LOOP AT <condition_table> ASSIGNING <cond_table>.
      CLEAR: wa_zvsl03.

      UNASSIGN <knumh>.
*Assign the Condition Number to the <Field Symbol>
      IF <knumh> IS NOT ASSIGNED.
        ASSIGN COMPONENT 'KNUMH' OF STRUCTURE <cond_table> TO <knumh>.
      ENDIF.

      IF <knumh> IS ASSIGNED.
        wa_zvsl03-knumh = <knumh>.
      ENDIF.

      UNASSIGN <vkorg>.
      IF <vkorg> IS NOT ASSIGNED.
        ASSIGN COMPONENT 'VKORG' OF STRUCTURE <cond_table> TO <vkorg>.
      ENDIF.

      IF <vkorg> IS ASSIGNED.
        wa_zvsl03-vkorg = <vkorg>.
      ENDIF.

      UNASSIGN <vtweg>.
      IF <vtweg> IS NOT ASSIGNED.
        ASSIGN COMPONENT 'VTWEG' OF STRUCTURE <cond_table> TO <vtweg>.
      ENDIF.

      IF <vtweg> IS ASSIGNED.
        wa_zvsl03-vtweg = <vtweg>.
      ENDIF.

      UNASSIGN <matnr>.
      IF <matnr> IS NOT ASSIGNED.
        ASSIGN COMPONENT 'MATNR' OF STRUCTURE <cond_table> TO <matnr>.
      ENDIF.

      IF <matnr> IS ASSIGNED.
        wa_zvsl03-matnr = <matnr>.
      ENDIF.

      UNASSIGN <matkl>.
      IF <matkl> IS NOT ASSIGNED.
        ASSIGN COMPONENT 'MATKL' OF STRUCTURE <cond_table> TO <matkl>.
      ENDIF.

      IF <matkl> IS ASSIGNED.
        wa_zvsl03-matkl = <matkl>.
      ENDIF.

      UNASSIGN <kunnr>.
      IF <kunnr> IS NOT ASSIGNED.
        ASSIGN COMPONENT 'KUNNR' OF STRUCTURE <cond_table> TO <kunnr>.
      ENDIF.

      IF <kunnr> IS ASSIGNED.
        wa_zvsl03-kunnr = <kunnr>.
      ENDIF.

      UNASSIGN <waers>.
      IF <waers> IS NOT ASSIGNED.
        ASSIGN COMPONENT 'WAERS' OF STRUCTURE <cond_table> TO <waers>.
      ENDIF.

      IF <waers> IS ASSIGNED.
        wa_zvsl03-waers = <waers>.
      ENDIF.

      UNASSIGN <inco1>.
      IF <inco1> IS NOT ASSIGNED.
        ASSIGN COMPONENT 'INCO1' OF STRUCTURE <cond_table> TO <inco1>.
      ENDIF.

      IF <inco1> IS ASSIGNED.
        wa_zvsl03-inco1 = <inco1>.
      ENDIF.

      UNASSIGN <extwg>.
      IF <extwg> IS NOT ASSIGNED.
        ASSIGN COMPONENT 'EXTWG' OF STRUCTURE <cond_table> TO <extwg>.
      ENDIF.

      IF <extwg> IS ASSIGNED.
        wa_zvsl03-extwg = <extwg>.
      ENDIF.

*      lv_flag = abap_false.

      CLEAR: wa_konp.

*      CLEAR: lv_knumh.

      READ TABLE it_konp
        INTO wa_konp
        WITH KEY knumh = <knumh>.

      IF sy-subrc EQ 0.
        wa_zvsl03-knumh = wa_konp-knumh.
        wa_zvsl03-konwa = wa_konp-konwa.

        IF <old_field> IS ASSIGNED.
          <old_field> = wa_konp-kbetr.
        ENDIF.
      ELSE.
        CONTINUE.
      ENDIF.

      CLEAR: wa_mat.
*Material Key Field
      IF  g_table EQ 'A004'
       OR g_table EQ 'A005'
       OR g_table EQ 'A118'
       OR g_table EQ 'A802'
       OR g_table EQ 'A804'
       OR g_table EQ 'A904'
       OR g_table EQ 'A920'
       OR g_table EQ 'A921'
       OR g_table EQ 'A922'
       OR g_table EQ 'A923'
       OR g_table EQ 'A925'.

        SORT it_mat BY matnr.

*For checking if the material is valid?
        READ TABLE it_mat INTO wa_mat
          WITH KEY matnr = <matnr>.

        IF sy-subrc EQ 0.
          wa_zvsl03-matkl = wa_mat-matkl.
          wa_zvsl03-prdha = wa_mat-prdha.
          wa_zvsl03-extwg = wa_mat-extwg.
          wa_zvsl03-maktx = wa_mat-maktx.

          IF wa_zvsl03-waers IS NOT INITIAL
            AND wa_zvsl03-waers NE wa_mat-werks.
*Document Currency
            wa_zvsl03-werks = wa_mat-werks.
          ENDIF.
        ENDIF.

*Material Group
      ELSEIF g_table EQ 'A809'
          OR g_table EQ 'A924'
          OR g_table EQ 'A930'.

        SORT it_mat BY matkl.

        READ TABLE it_mat INTO wa_mat
          WITH KEY matkl = <matkl>.

*Brand
      ELSEIF g_table EQ 'A927'
          OR g_table EQ 'A928'
          OR g_table EQ 'A929'.

        SORT it_mat BY extwg.

        READ TABLE it_mat INTO wa_mat
          WITH KEY extwg = <extwg>.

      ENDIF.

      IF sy-subrc EQ 0 AND wa_mat IS NOT INITIAL.
*Brand
        wa_zvsl03-extwg = wa_mat-extwg.
*Material Group
        wa_zvsl03-matkl = wa_mat-matkl.
*Model
        wa_zvsl03-prdha = wa_mat-prdha.
      ELSE.
        CONTINUE.
      ENDIF.

      IF <field> IS ASSIGNED.
        CASE abap_true.
          WHEN r_zmpl.
            <field> = ( 1 + ( p_zmpl / 100 ) ) * <old_field>.
*          WHEN r_zmul.
*          WHEN r_zexc.
          WHEN r_zfrt.
            <field> = p_zfrt.
*          WHEN r_zfct.
*          WHEN r_zbuf.
*          WHEN r_zbft.
          WHEN r_zdis.
*To solve the issue with Database with 3 decimals and VK11 2 decimals
            wa_zvsl03-zdis  = wa_zvsl03-zdis / 10.
            wa_zvsl03-zdis_n = p_zdis.
          WHEN OTHERS.
            CONTINUE.
        ENDCASE.
      ENDIF.

      APPEND wa_zvsl03 TO it_zvsl03_n.
    ENDLOOP.

    SORT it_zvsl03_n BY vkorg werks kunnr extwg matnr.
  ENDIF.

ENDFORM.                    " PROCESS_DATA
*&---------------------------------------------------------------------*
*&      Form  CONVERT_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM convert_data .

  IF r_act01 EQ abap_true.
    CHECK it_zvsl03_n[] IS NOT INITIAL.

    IF r_zmpl EQ abap_true.
      PERFORM convert_data_to_excel USING 'ZMPL'
                                          p_zmpl_d.
    ENDIF.

*    IF r_zmul EQ abap_true.
*      PERFORM convert_data_to_excel USING 'ZMUL'
*                                          p_zmul_d.
*    ENDIF.
*
*    IF r_zexc EQ abap_true.
*      PERFORM convert_data_to_excel USING 'ZEX1'
*                                          p_zexc_d.
*    ENDIF.
*
    IF r_zfrt EQ abap_true.
      PERFORM convert_data_to_excel USING 'ZFRT'
                                          p_zfrt_d.
    ENDIF.
*
*    IF r_zfct EQ abap_true.
*      PERFORM convert_data_to_excel USING 'ZFCT'
*                                          p_zfct_d.
*    ENDIF.
*
*    IF r_zbuf EQ abap_true.
*      PERFORM convert_data_to_excel USING 'ZBUF'
*                                          p_zbuf_d.
*    ENDIF.
*
*    IF r_zbft EQ abap_true.
*      PERFORM convert_data_to_excel USING 'ZBFT'
*                                          p_zbft_d.
*    ENDIF.

    IF r_zdis EQ abap_true.
      PERFORM convert_data_to_excel USING 'ZDIS'
                                          p_zdis_d.
    ENDIF.

  ENDIF.

ENDFORM.                    " CONVERT_DATA
*&---------------------------------------------------------------------*
*&      Form  CONVERT_DATA_TO_EXCEL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_1054   text
*----------------------------------------------------------------------*
FORM convert_data_to_excel  USING    VALUE(p_field)
                                     VALUE(p_date).

  DATA: lv_text       TYPE          string,
        lv_filename   TYPE          string,
        lv_textoutput TYPE TABLE OF string.

  DATA: lv_fieldvalue(17)  TYPE c,
        lv_fieldvalue2(17) TYPE c,
        lv_date(10)        TYPE c.

  DATA: wa_dd02t TYPE dd02t.

  CHECK it_zvsl03_n[] IS NOT INITIAL.

  CONCATENATE p_file '\' p_vkorg '-' p_field '-' sy-datum '-' sy-uzeit '.XLS' INTO lv_filename.

  LOOP AT it_zvsl03_n INTO wa_zvsl03.

    AT FIRST.
      CONCATENATE 'Sales Organisation:'
                  p_vkorg
                  INTO lv_text
                  SEPARATED BY cl_abap_char_utilities=>horizontal_tab.
      APPEND lv_text TO lv_textoutput.

      CLEAR: lv_text.
      IF r_act01 EQ abap_true AND r_zmpl EQ abap_true.
        CONCATENATE 'ZMPL - ' g_table INTO lv_text.
*      ELSEIF r_act01 EQ abap_true AND r_zmul EQ abap_true.
*        CONCATENATE 'ZMUL - ' g_table INTO lv_text.
*      ELSEIF r_act01 EQ abap_true AND r_zexc EQ abap_true.
*        CONCATENATE 'ZEXC - ' g_table INTO lv_text.
      ELSEIF r_act01 EQ abap_true AND r_zfrt EQ abap_true.
        CONCATENATE 'ZFRT - ' g_table INTO lv_text.
*      ELSEIF r_act01 EQ abap_true AND r_zfct EQ abap_true.
*        CONCATENATE 'ZFCT - ' g_table INTO lv_text.
*      ELSEIF r_act01 EQ abap_true AND r_zbuf EQ abap_true.
*        CONCATENATE 'ZBUF - ' g_table INTO lv_text.
*      ELSEIF r_act01 EQ abap_true AND r_zbft EQ abap_true.
*        CONCATENATE 'ZBFT - ' g_table INTO lv_text.
      ELSEIF r_act01 EQ abap_true AND r_zdis EQ abap_true.
        CONCATENATE 'ZDIS - ' g_table INTO lv_text.
      ENDIF.

*Get Table Description
      SELECT SINGLE * FROM dd02t
        INTO wa_dd02t
        WHERE tabname    EQ g_table
          AND ddlanguage EQ 'E'
          AND as4local   EQ 'A'.

      IF sy-subrc EQ 0.
        CONCATENATE lv_text wa_dd02t-ddtext
          INTO lv_text SEPARATED BY space.
      ENDIF.

      APPEND lv_text TO lv_textoutput.
    ENDAT.

    CLEAR: lv_text , lv_fieldvalue.
    lv_fieldvalue = <field>.

    CLEAR:lv_fieldvalue2.
    CASE p_field.
      WHEN 'ZMPL'.
        lv_fieldvalue2 = wa_zvsl03-konwa.
      WHEN 'ZFRT'.
        lv_fieldvalue2 = wa_zvsl03-konwa.
      WHEN 'ZDIS'.
        lv_fieldvalue2 = wa_zvsl03-konwa.
    ENDCASE.

    CLEAR: lv_date.

    IF r_zmpl EQ abap_true.
      WRITE p_zmpl_d TO lv_date DD/MM/YYYY.
*    ELSEIF r_zmul EQ abap_true.
*      WRITE p_zmul_d TO lv_date DD/MM/YYYY.
*    ELSEIF r_zexc EQ abap_true.
*      WRITE p_zexc_d TO lv_date DD/MM/YYYY.
    ELSEIF r_zfrt EQ abap_true.
      WRITE p_zfrt_d TO lv_date DD/MM/YYYY.
*    ELSEIF r_zfct EQ abap_true.
*      WRITE p_zfct_d TO lv_date DD/MM/YYYY.
*    ELSEIF r_zbuf EQ abap_true.
*      WRITE p_zbuf_d TO lv_date DD/MM/YYYY.
*    ELSEIF r_zbft EQ abap_true.
*      WRITE p_zbft_d TO lv_date DD/MM/YYYY.
    ELSEIF r_zdis EQ abap_true.
      WRITE p_zdis_d TO lv_date DD/MM/YYYY.
    ENDIF.

*    WRITE p_date TO lv_date DD/MM/YYYY.

    CONCATENATE wa_zvsl03-matnr
                space
                lv_fieldvalue     "Amount
                lv_fieldvalue2    "Konwa
                space "'1'
                space "'EA'
                space "'C'
                space
                lv_date
                '31.12.9999'
                INTO lv_text
                SEPARATED BY cl_abap_char_utilities=>horizontal_tab.

    APPEND lv_text TO lv_textoutput.
  ENDLOOP.

  IF x_file EQ abap_true.
    CALL FUNCTION 'GUI_DOWNLOAD'
      EXPORTING
*       BIN_FILESIZE            =
        filename                = lv_filename
        filetype                = 'ASC'
*       APPEND                  = ' '
        write_field_separator   = ' '
*       HEADER                  = '00'
*       TRUNC_TRAILING_BLANKS   = ' '
*       WRITE_LF                = 'X'
*       COL_SELECT              = ' '
*       COL_SELECT_MASK         = ' '
*       DAT_MODE                = ' '
*       CONFIRM_OVERWRITE       = ' '
*       NO_AUTH_CHECK           = ' '
*       CODEPAGE                = ' '
*       IGNORE_CERR             = ABAP_TRUE
*       REPLACEMENT             = '#'
*       WRITE_BOM               = ' '
*       TRUNC_TRAILING_BLANKS_EOL       = 'X'
*       WK1_N_FORMAT            = ' '
*       WK1_N_SIZE              = ' '
*       WK1_T_FORMAT            = ' '
*       WK1_T_SIZE              = ' '
*       WRITE_LF_AFTER_LAST_LINE        = ABAP_TRUE
*       SHOW_TRANSFER_STATUS    = ABAP_TRUE
*       VIRUS_SCAN_PROFILE      = '/SCET/GUI_DOWNLOAD'
*     IMPORTING
*       FILELENGTH              =
      TABLES
        data_tab                = lv_textoutput
*       FIELDNAMES              =
      EXCEPTIONS
        file_write_error        = 1
        no_batch                = 2
        gui_refuse_filetransfer = 3
        invalid_type            = 4
        no_authority            = 5
        unknown_error           = 6
        header_not_allowed      = 7
        separator_not_allowed   = 8
        filesize_not_allowed    = 9
        header_too_long         = 10
        dp_error_create         = 11
        dp_error_send           = 12
        dp_error_write          = 13
        unknown_dp_error        = 14
        access_denied           = 15
        dp_out_of_memory        = 16
        disk_full               = 17
        dp_timeout              = 18
        file_not_found          = 19
        dataprovider_exception  = 20
        control_flush_error     = 21
        OTHERS                  = 22.

    IF sy-subrc <> 0.
* Implement suitable error handling here
      MESSAGE e000(zc903) WITH 'Converting to saved formats fails'.
    ENDIF.

  ENDIF.
ENDFORM.                    " CONVERT_DATA_TO_EXCEL
**&---------------------------------------------------------------------*
**&      Form  PROCESS_CONDITION
**&---------------------------------------------------------------------*
**       text
**----------------------------------------------------------------------*
**      -->P_1668   text
**      <--P_LV_FLAG  text
**----------------------------------------------------------------------*
*FORM process_condition  USING    VALUE(p_kschl)
*                        CHANGING p_flag
*                                 p_konwa
*                                 p_knumh
*                                 p_kbetr.
*
*  DATA: lv_knumh TYPE knumh.
*
*  CLEAR: p_konwa.
*
*  p_flag = abap_false.
*
*  CASE g_table.
**  IF   ( r_zmpl EQ abap_true AND r_zmpl02 EQ abap_true )
**    OR ( r_zmul EQ abap_true AND r_zmul02 EQ abap_true ).
*    WHEN 'A004'.
*      CLEAR: wa_a004.
*      READ TABLE it_a004
*        INTO wa_a004
*        WITH KEY kschl = p_kschl
*                 vkorg = p_vkorg
**               vtweg = p_vtweg         "might be empty
*                 matnr = wa_zvsl03-matnr.
*
*      IF sy-subrc EQ 0.
***To remove the entries that does not belong to the specify Distribution Channel
**      IF p_vtweg NE space.
**        DELETE it_a004 WHERE vtweg NE p_vtweg.
**      ENDIF.
*        lv_knumh = wa_a004-knumh.
*        p_flag = abap_true.
*      ENDIF.
**  ENDIF.
*
**  IF   ( r_zmpl EQ abap_true AND r_zmpl01 EQ abap_true )
**    OR ( r_zmul EQ abap_true AND r_zmul01 EQ abap_true ).
*    WHEN 'A005'.
*      CLEAR: wa_a005.
*      READ TABLE it_a005
*        INTO wa_a005
*        WITH KEY kschl = p_kschl
*                 vkorg = p_vkorg
**               vtweg = p_vtweg       "might be empty
*                 kunnr = p_kunnr
*                 matnr = wa_zvsl03-matnr.
*
*      IF sy-subrc EQ 0.
***To remove the entries that does not belong to the specify Distribution Channel
**      IF p_vtweg NE space.
**        DELETE it_a005 WHERE vtweg NE p_vtweg.
**      ENDIF.
*        lv_knumh = wa_a005-knumh.
*        p_flag = abap_true.
*      ENDIF.
**  ENDIF.
*
**  IF   ( r_zmpl EQ abap_true AND r_zmpl05 EQ abap_true )
**    OR ( r_zmul EQ abap_true AND r_zmul05 EQ abap_true ).
*    WHEN '118'.
*      CLEAR: wa_a118.
*      READ TABLE it_a118
*        INTO wa_a118
*        WITH KEY kschl = p_kschl
*                 matnr = wa_zvsl03-matnr.
*
*      IF sy-subrc EQ 0.
*        lv_knumh = wa_a118-knumh.
*        p_flag = abap_true.
*      ENDIF.
**    ENDIF.
*
*
**  IF   ( r_zmpl EQ abap_true AND r_zmpl04 EQ abap_true )
**    OR ( r_zmul EQ abap_true AND r_zmul04 EQ abap_true )
**    OR ( r_zdis EQ abap_true AND r_zdis04 EQ abap_true ).
*
*    WHEN 'A802'.
*      CLEAR: wa_a802.
*      READ TABLE it_a802
*      INTO wa_a802
*      WITH KEY kschl = p_kschl
*               vkorg = p_vkorg
*               matnr = wa_zvsl03-matnr.
*
*      IF sy-subrc EQ 0.
*        lv_knumh = wa_a802-knumh.
*        p_flag = abap_true.
*      ENDIF.
**  ENDIF.
*
**  IF   ( r_zmpl EQ abap_true AND r_zmpl03 EQ abap_true )
**    OR ( r_zmul EQ abap_true AND r_zmul03 EQ abap_true ).
*    WHEN 'A804'.
*      CLEAR: wa_a804.
*      READ TABLE it_a804
*        INTO wa_a804
*        WITH KEY kschl = p_kschl
*                 vkorg = p_vkorg
*                 waerk = p_waers
*                 matnr = wa_zvsl03-matnr.
*
*      IF sy-subrc EQ 0.
*        lv_knumh = wa_a804-knumh.
*        p_flag = abap_true.
*      ENDIF.
**  ENDIF.
*
**  IF r_zexc EQ abap_true AND r_zexc02 EQ abap_true.
*    WHEN 'A903'.
*      CLEAR: wa_a903.
*      READ TABLE it_a903
*        INTO wa_a903
*        WITH KEY kschl = p_kschl
*                 vkorg = p_vkorg.
*
*      IF sy-subrc EQ 0.
*        lv_knumh = wa_a903-knumh.
*        p_flag = abap_true.
*      ENDIF.
**  ENDIF.
*
**  IF r_zexc EQ abap_true AND r_zexc01 EQ abap_true.
*    WHEN 'A904'.
*      CLEAR: wa_a904.
*      READ TABLE it_a904
*        INTO wa_a904
*        WITH KEY kschl = p_kschl
*                 vkorg = p_vkorg
*                 waerk = p_waers.
*
*      IF sy-subrc EQ 0.
*        lv_knumh = wa_a904-knumh.
*        p_flag = abap_true.
*      ENDIF.
**  ENDIF.
*
**  IF r_zdis EQ abap_true AND r_zdis02 EQ abap_true.
*    WHEN 'A924'.
*      CLEAR: wa_a924.
*      READ TABLE it_a924
*        INTO wa_a924
*        WITH KEY kschl = p_kschl
*                 vkorg = p_vkorg
**               kunnr = p_kunnr
*                 extwg = wa_zvsl03-extwg
*                 matkl = wa_zvsl03-matkl.
*
*      IF sy-subrc EQ 0.
***To remove the entries that does not belong to the specify Customer
**      IF p_kunnr NE space.
**        DELETE it_a924 WHERE kunnr NE p_kunnr.
**      ENDIF.
*        lv_knumh = wa_a925-knumh.
*        p_flag = abap_true.
*      ENDIF.
**  ENDIF.
*
**  IF r_zdis EQ abap_true AND r_zdis01 EQ abap_true.
*    WHEN 'A925'.
*      CLEAR: wa_a925.
*      READ TABLE it_a925
*        INTO wa_a925
*        WITH KEY kschl = p_kschl
*                 vkorg = p_vkorg
**               kunnr = p_kunnr
*                 matnr = wa_zvsl03-matnr.
*
*      IF sy-subrc EQ 0.
***To remove the entries that does not belong to the specify Customer
**      IF p_kunnr NE space.
**        DELETE it_a925 WHERE kunnr NE p_kunnr.
**      ENDIF.
*        lv_knumh = wa_a925-knumh.
*        p_flag = abap_true.
*      ENDIF.
**  ENDIF.
*
**  IF r_zdis EQ abap_true AND r_zdis03 EQ abap_true.
*    WHEN 'A928'.
*      CLEAR: wa_a928.
*      READ TABLE it_a928
*        INTO wa_a928
*        WITH KEY kschl = p_kschl
*                 vkorg = p_vkorg
**               kunnr = p_kunnr
*                 extwg = wa_zvsl03-extwg.
*
*      IF sy-subrc EQ 0.
***To remove the entries that does not belong to the specify Customer
**      IF p_kunnr NE space.
**        DELETE it_a928 WHERE kunnr NE p_kunnr.
**      ENDIF.
*        lv_knumh = wa_a928-knumh.
*        p_flag = abap_true.
*      ENDIF.
**  ENDIF.
*
**  IF r_zdis EQ abap_true AND r_zdis06 EQ abap_true.
*    WHEN 'A929'.
*      CLEAR: wa_a929.
*      READ TABLE it_a929
*        INTO wa_a929
*        WITH KEY kschl = p_kschl
*                 vkorg = p_vkorg
*                 extwg = wa_zvsl03-extwg.
*
*      IF sy-subrc EQ 0.
*        lv_knumh = wa_a929-knumh.
*        p_flag = abap_true.
*      ENDIF.
**  ENDIF.
*
**  IF r_zdis EQ abap_true AND r_zdis05 EQ abap_true.
*    WHEN 'A930'.
*      CLEAR: wa_a930.
*      READ TABLE it_a930
*        INTO wa_a930
*        WITH KEY kschl = p_kschl
*                 vkorg = p_vkorg
*                 extwg = wa_zvsl03-extwg
*                 matkl = wa_zvsl03-matkl.
*
*      IF sy-subrc EQ 0.
*        lv_knumh = wa_a930-knumh.
*        p_flag = abap_true.
*      ENDIF.
**  ENDIF.
*  ENDCASE.
*
*  IF p_flag EQ abap_true.
*
*    CLEAR: wa_konp.
*    READ TABLE it_konp
*      INTO wa_konp
*      WITH KEY knumh = lv_knumh.
*
*    IF sy-subrc EQ 0.
*      p_konwa = wa_konp-konwa.
*      p_knumh = lv_knumh.
*      p_kbetr = wa_konp-kbetr.
*    ENDIF.
*
*  ENDIF.
*ENDFORM.                    " PROCESS_CONDITION
**&---------------------------------------------------------------------*
**&      Form  PROCESS_CONDITION2
**&---------------------------------------------------------------------*
**       text
**----------------------------------------------------------------------*
**      -->P_2051   text
**      <--P_LV_FLAG  text
**      <--P_LV_ZFRT  text
**----------------------------------------------------------------------*
*FORM process_condition2  USING    VALUE(pv_kschl)
*                         CHANGING pv_flag
*                                  pv_zfrt.
*
*  DATA: lv_knumh TYPE knumh.
*  CLEAR: lv_knumh.
*
*  CLEAR: pv_zfrt.
*  pv_flag = abap_false.
*
*  IF pv_kschl EQ 'ZFRT'.
*    READ TABLE it_a920
*      INTO wa_a920
*      WITH KEY kschl = pv_kschl
*               vkorg = p_vkorg
*               vtweg = p_vtweg
*               werks = p_werks
*               matnr = wa_zvsl03-matnr.
*
*    IF sy-subrc EQ 0.
*      pv_flag = abap_true.
*      lv_knumh = wa_a920-knumh.
*    ENDIF.
*
*    IF pv_flag NE abap_true.
*      READ TABLE it_a921
*        INTO wa_a921
*        WITH KEY kschl = pv_kschl
*                 vkorg = p_vkorg
*                 vtweg = p_vtweg
*                 matnr = wa_zvsl03-matnr.
*
*      IF sy-subrc EQ 0.
*        pv_flag = abap_true.
*        lv_knumh = wa_a921-knumh.
*      ENDIF.
*    ENDIF.
*
*    IF pv_flag NE abap_true.
*      READ TABLE it_a922
*        INTO wa_a922
*        WITH KEY kschl = pv_kschl
*                 vkorg = p_vkorg
*                 werks = p_werks
*                 matnr = wa_zvsl03-matnr.
*
*      IF sy-subrc EQ 0.
*        pv_flag = abap_true.
*        lv_knumh = wa_a922-knumh.
*      ENDIF.
*    ENDIF.
*
*    IF pv_flag NE abap_true.
*      READ TABLE it_a923
*        INTO wa_a923
*        WITH KEY kschl = pv_kschl
*                 vkorg = p_vkorg
*                 matnr = wa_zvsl03-matnr.
*
*      IF sy-subrc EQ 0.
*        pv_flag = abap_true.
*        lv_knumh = wa_a923-knumh.
*      ENDIF.
*    ENDIF.
*
**exclude Table A927 because its by brand
*
*    IF pv_flag EQ abap_true.
*      CLEAR: wa_konp.
*      READ TABLE it_konp
*        INTO wa_konp
*        WITH KEY knumh = lv_knumh.
*
*      IF sy-subrc EQ 0
*        AND wa_konp-kbetr NE 0.
**        pv_zfrt = p_zfrt.
*      ENDIF.
*      pv_flag = abap_false.
*    ENDIF.
*
*  ENDIF.  "ZFRT
*
*ENDFORM.                    " PROCESS_CONDITION2
*&---------------------------------------------------------------------*
*&      Form  HIDE_SCREEN
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM hide_screen.

  LOOP AT SCREEN.
    IF   screen-group1 = 'MPL'
      OR screen-group1 = 'MUL'
      OR screen-group1 = 'EXC'
      OR screen-group1 = 'FRT'
      OR screen-group1 = 'FCT'
      OR screen-group1 = 'BUF'
      OR screen-group1 = 'BFT'
      OR screen-group1 = 'DIS'
      OR screen-group1 = 'RG1'
      OR screen-group1 = 'ZVS'  "ZVSL03 PARAMETERS
      OR screen-group1 = 'Z01'  "Matnr
      OR screen-group1 = 'Z02'  "Kunnr
      OR screen-group1 = 'Z03'  "Extwg
      OR screen-group1 = 'Z04'  "Prdha
      OR screen-group1 = 'Z05'  "Lgort
      OR screen-group1 = 'Z06'  "Matkl
      OR screen-group1 = 'Z07'  "Inco
      OR screen-group1 = 'Z08'  "Vtweg
      .
      screen-active = '0'.
    ENDIF.

    IF r_act01 EQ abap_true.
      IF screen-group1 = 'RG1'
        OR screen-group1 = 'ZVS'.
        screen-active = '1'.
      ENDIF.
      IF ( r_act01 EQ abap_true AND r_zmpl EQ abap_true ).
        IF screen-group1 = 'MPL'.
          screen-active = '1'.
        ENDIF.

        CASE abap_true.
          WHEN r_zmpl01.
            IF screen-group1 = 'Z01'
              OR screen-group1 = 'Z02'
              OR screen-group1 = 'Z08'.
              screen-active = '1'.
            ENDIF.
          WHEN r_zmpl02.
            IF screen-group1 = 'Z01'
              OR screen-group1 = 'Z08'.
              screen-active = '1'.
            ENDIF.
          WHEN r_zmpl03.
            IF screen-group1 = 'Z01'.
              screen-active = '1'.
            ENDIF.
          WHEN r_zmpl04.
            IF screen-group1 = 'Z01'.
              screen-active = '1'.
            ENDIF.
          WHEN r_zmpl05.
            IF screen-group1 = 'Z01'.
              screen-active = '1'.
            ENDIF.
        ENDCASE.
*      ELSEIF ( r_act01 EQ abap_true AND r_zmul EQ abap_true ).
*        IF screen-group1 = 'MUL'.
*          screen-active = '1'.
*        ENDIF.
*      ELSEIF ( r_act01 EQ abap_true AND r_zexc EQ abap_true ).
*        IF screen-group1 = 'EXC'.
*          screen-active = '1'.
*        ENDIF.
      ELSEIF ( r_act01 EQ abap_true AND r_zfrt EQ abap_true ).
        IF screen-group1 = 'FRT'.
          screen-active = '1'.
        ENDIF.

        CASE abap_true.
          WHEN r_zfrt01.
            IF screen-group1 = 'Z01'
            OR screen-group1 = 'Z07'
            OR screen-group1 = 'Z08'.
              screen-active = '1'.
            ENDIF.
          WHEN r_zfrt02.
            IF screen-group1 = 'Z01'
            OR screen-group1 = 'Z07'
            OR screen-group1 = 'Z08'.
              screen-active = '1'.
            ENDIF.
          WHEN r_zfrt03.
            IF screen-group1 = 'Z01'
            OR screen-group1 = 'Z07'.
              screen-active = '1'.
            ENDIF.
          WHEN r_zfrt04.
            IF screen-group1 = 'Z01'
            OR screen-group1 = 'Z07'.
              screen-active = '1'.
            ENDIF.
          WHEN r_zfrt05.
            IF screen-group1 = 'Z03'
            OR screen-group1 = 'Z07'.
              screen-active = '1'.
            ENDIF.
        ENDCASE.
*      ELSEIF ( r_act01 EQ abap_true AND r_zfct EQ abap_true ).
*        IF screen-group1 = 'FCT'.
*          screen-active = '1'.
*        ENDIF.
*      ELSEIF ( r_act01 EQ abap_true AND r_zbuf EQ abap_true ).
*        IF screen-group1 = 'BUF'.
*          screen-active = '1'.
*        ENDIF.
*      ELSEIF ( r_act01 EQ abap_true AND r_zbft EQ abap_true ).
*        IF screen-group1 = 'BFT'.
*          screen-active = '1'.
*        ENDIF.
      ELSEIF ( r_act01 EQ abap_true AND r_zdis EQ abap_true ).
        IF  screen-group1 = 'DIS'.
          screen-active = '1'.
        ENDIF.

        CASE abap_true.
          WHEN r_zdis01.
            IF screen-group1 = 'Z01'
              OR screen-group1 = 'Z02'.
              screen-active = '1'.
            ENDIF.
          WHEN r_zdis02.
            IF screen-group1 = 'Z02'
              OR screen-group1 = 'Z03'
              OR screen-group1 = 'Z06'.
              screen-active = '1'.
            ENDIF.
          WHEN r_zdis03.
            IF screen-group1 = 'Z02'
              OR screen-group1 = 'Z03'.
              screen-active = '1'.
            ENDIF.
          WHEN r_zdis04.
            IF screen-group1 = 'Z01'.
              screen-active = '1'.
            ENDIF.
          WHEN r_zdis05.
            IF screen-group1 = 'Z03'
            OR screen-group1 = 'Z06'.
              screen-active = '1'.
            ENDIF.
          WHEN r_zdis06.
            IF screen-group1 = 'Z03'.
              screen-active = '1'.
            ENDIF.
        ENDCASE.
      ENDIF.
    ENDIF.

    MODIFY SCREEN.

  ENDLOOP.
ENDFORM.                    " HIDE_SCREEN
*&---------------------------------------------------------------------*
*&      Form  UDPATE_PRICE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM update_price .

  DATA: lv_kotabnr TYPE konh-kotabnr,
        lv_kvewe   TYPE konh-kvewe,
        lv_vakey   TYPE konh-vakey,
        lv_kschl   TYPE kschl,
        wa_komv    TYPE komv,
        wa_komg    TYPE komg,
        wa_komp    TYPE komp.

  DATA: it_copy_record TYPE STANDARD TABLE OF komv,
        it_knumh       TYPE STANDARD TABLE OF knumh_comp.

  DATA: wa_copy_record TYPE komv.

  DATA: lv_date(10)    TYPE c,
        lv_kbetr       TYPE konp-kbetr, "kbetr_kond.
        lv_kbetr_c(15) TYPE c,
        lv_vtweg_c(2)  TYPE c,
        lv_kunnr_c(10) TYPE c,
        lv_inputscr(4) TYPE c,
        lv_message     TYPE string.

  FREE: it_output.

  LOOP AT it_zvsl03_n INTO wa_zvsl03.
    CLEAR: lv_kotabnr, lv_kvewe,
           lv_vakey,  wa_komg.

    FREE: it_bdcdata.
    CLEAR: wa_bdcdata.

    lv_kotabnr = g_table+1(3).
    lv_kvewe = g_table(1).

    IF <vtweg> IS ASSIGNED.
      lv_vtweg_c = <vtweg>.
    ENDIF.

    IF <kunnr> IS ASSIGNED.
      lv_kunnr_c = <kunnr>.
    ENDIF.

    CLEAR: lv_date.
    IF r_zmpl EQ abap_true.
      lv_kschl = 'ZMPL'.
      WRITE p_zmpl_d TO lv_date DD/MM/YYYY.
*    ELSEIF r_zmul EQ abap_true.
*      lv_kschl = 'ZMUL'.
*      WRITE p_zmul_d TO lv_date DD/MM/YYYY.
*    ELSEIF r_zexc EQ abap_true.
*      lv_kschl = 'ZEXC'.
*      WRITE p_zexc_d TO lv_date DD/MM/YYYY.
    ELSEIF r_zfrt EQ abap_true.
      lv_kschl = 'ZFRT'.
      WRITE p_zfrt_d TO lv_date DD/MM/YYYY.
*    ELSEIF r_zfct EQ abap_true.
*      lv_kschl = 'ZFCT'.
*      WRITE p_zfct_d TO lv_date DD/MM/YYYY.
*    ELSEIF r_zbuf EQ abap_true.
*      lv_kschl = 'ZBUF'.
*      WRITE p_zbuf_d TO lv_date DD/MM/YYYY.
*    ELSEIF r_zbft EQ abap_true.
*      lv_kschl = 'ZBFT'.
*      WRITE p_zbft_d TO lv_date DD/MM/YYYY.
    ELSEIF r_zdis EQ abap_true.
      lv_kschl = 'ZDIS'.
      WRITE p_zdis_d TO lv_date DD/MM/YYYY.
    ENDIF.

    CLEAR: wa_komg.
    CLEAR: lv_kbetr, lv_kbetr_c.

*For the Amount Column
    IF <field> IS ASSIGNED.
      MOVE <field> TO lv_kbetr_c.
    ENDIF.

*VK11 Home Screen
    PERFORM bdc_dynpro USING 'SAPMV13A'
                             '0100'.

*Enter the Condition Type in VK11
    PERFORM bdc_field USING 'RV13A-KSCHL'
                            lv_kschl.

*Hit Enter
    PERFORM bdc_field USING 'BDC_OKCODE'
                            '/00'.

*Key Combination's Pop Up Window
    PERFORM bdc_dynpro USING 'SAPLV14A'
                              '0100'.

*Select the Key Condition from the pop up window
    IF     ( r_zdis EQ abap_true AND r_zdis06 EQ abap_true ).
      PERFORM bdc_field USING 'RV130-SELKZ(06)'
                        'X'.
    ELSEIF ( r_zmpl EQ abap_true AND r_zmpl05 EQ abap_true )
*      OR   ( r_zmul EQ abap_true AND r_zmul05 EQ abap_true )
      OR   ( r_zfrt EQ abap_true AND r_zfrt05 EQ abap_true )
      OR   ( r_zdis EQ abap_true AND r_zdis05 EQ abap_true ).
      PERFORM bdc_field USING 'RV130-SELKZ(05)'
                              'X'.
    ELSEIF ( r_zmpl EQ abap_true AND r_zmpl04 EQ abap_true )
*        OR ( r_zmul EQ abap_true AND r_zmul04 EQ abap_true )
        OR ( r_zfrt EQ abap_true AND r_zfrt04 EQ abap_true )
        OR ( r_zdis EQ abap_true AND r_zdis04 EQ abap_true ).
      PERFORM bdc_field USING 'RV130-SELKZ(04)'
                              'X'.
    ELSEIF ( r_zmpl EQ abap_true AND r_zmpl03 EQ abap_true )
*        OR ( r_zmul EQ abap_true AND r_zmul03 EQ abap_true )
        OR ( r_zfrt EQ abap_true AND r_zfrt03 EQ abap_true )
        OR ( r_zdis EQ abap_true AND r_zdis03 EQ abap_true ).
      PERFORM bdc_field USING 'RV130-SELKZ(03)'
                              'X'.
    ELSEIF ( r_zmpl EQ abap_true AND r_zmpl02 EQ abap_true )
*        OR ( r_zmul EQ abap_true AND r_zmul02 EQ abap_true )
        OR ( r_zfrt EQ abap_true AND r_zfrt02 EQ abap_true )
        OR ( r_zdis EQ abap_true AND r_zdis02 EQ abap_true ).
      PERFORM bdc_field USING 'RV130-SELKZ(02)'
                        'X'.
    ELSEIF ( r_zmpl EQ abap_true AND r_zmpl01 EQ abap_true )
*        OR ( r_zmul EQ abap_true AND r_zmul01 EQ abap_true )
        OR ( r_zfrt EQ abap_true AND r_zfrt01 EQ abap_true )
        OR ( r_zdis EQ abap_true AND r_zdis01 EQ abap_true ).
      PERFORM bdc_field USING 'RV130-SELKZ(01)'
                              'X'.
    ENDIF.

*Hit Enter
    PERFORM bdc_field USING 'BDC_OKCODE'
                            '=WEIT'.

    CASE lv_kotabnr.
      WHEN '004'.
        lv_inputscr = '1004'.
      WHEN '005'.
        lv_inputscr = '1005'.
      WHEN '118'.
        lv_inputscr = '1118'.
      WHEN '802'.
        lv_inputscr = '1802'.
      WHEN '804'.
        lv_inputscr = '1804'.
      WHEN '809'.
        lv_inputscr = '1809'.
      WHEN '903'.
        lv_inputscr = '1903'.
      WHEN '904'.
        lv_inputscr = '1904'.
      WHEN '920'.
        lv_inputscr = '1920'.
      WHEN '921'.
        lv_inputscr = '1921'.
      WHEN '922'.
        lv_inputscr = '1922'.
      WHEN '923'.
        lv_inputscr = '1923'.
      WHEN '924'.
        lv_inputscr = '1924'.
      WHEN '925'.
        lv_inputscr = '1925'.
      WHEN '927'.
        lv_inputscr = '1927'.
      WHEN '928'.
        lv_inputscr = '1928'.
      WHEN '929'.
        lv_inputscr = '1929'.
      WHEN '930'.
        lv_inputscr = '1930'.
      WHEN OTHERS.
    ENDCASE.

*Enter all the information
    PERFORM bdc_dynpro USING 'SAPMV13A'
                             lv_inputscr.

*---------------------------------------------------------
*Additional Input to be included
*---------------------------------------------------------
*Sales Organization
    IF   lv_kotabnr EQ '004'
      OR lv_kotabnr EQ '005'
      OR lv_kotabnr EQ '802'
      OR lv_kotabnr EQ '804'
      OR lv_kotabnr EQ '809'
      OR lv_kotabnr EQ '903'
      OR lv_kotabnr EQ '904'
      OR lv_kotabnr EQ '920'
      OR lv_kotabnr EQ '921'
      OR lv_kotabnr EQ '922'
      OR lv_kotabnr EQ '923'
      OR lv_kotabnr EQ '924'
      OR lv_kotabnr EQ '925'
      OR lv_kotabnr EQ '927'
      OR lv_kotabnr EQ '928'
      OR lv_kotabnr EQ '929'
      OR lv_kotabnr EQ '930'.

      PERFORM bdc_field USING 'KOMG-VKORG'
                               p_vkorg.
    ENDIF.

*Documented Currency
    IF   lv_kotabnr EQ '804'
      OR lv_kotabnr EQ '904'.
      PERFORM bdc_field USING 'KOMG-WAERK'
                               wa_zvsl03-konwa.
    ENDIF.

*Distribution Channel
    IF   lv_kotabnr EQ '004'
      OR lv_kotabnr EQ '005'
      OR lv_kotabnr EQ '920'
      OR lv_kotabnr EQ '921'.
      PERFORM bdc_field USING 'KOMG-VTWEG'
                               lv_vtweg_c.
    ENDIF.

*Customer Number
    IF   lv_kotabnr EQ '005'
      OR lv_kotabnr EQ '924'
      OR lv_kotabnr EQ '925'
      OR lv_kotabnr EQ '928'.
      PERFORM bdc_field USING 'KOMG-KUNNR'
                               lv_kunnr_c.
    ENDIF.

*Incoterms
    IF   lv_kotabnr EQ '920'
      OR lv_kotabnr EQ '921'
      OR lv_kotabnr EQ '922'
      OR lv_kotabnr EQ '923'
      OR lv_kotabnr EQ '927'.
      PERFORM bdc_field USING 'KOMG-INCO1'
                              p_inco.
    ENDIF.

*Brand
    IF   lv_kotabnr EQ '924'
      OR lv_kotabnr EQ '930'.
      PERFORM bdc_field USING 'KOMG-EXTWG'
                              wa_zvsl03-extwg.
    ENDIF.

*Plant
    IF  lv_kotabnr EQ '920'
     OR lv_kotabnr EQ '922'.
      PERFORM bdc_field USING 'KOMG-WERKS'
                              p_werks.
    ENDIF.
*---------------------------------------------------------


*---------------------------------------------------------
*Filling up Columns
*---------------------------------------------------------
*First Column input

    IF   lv_kotabnr EQ '004'
      OR lv_kotabnr EQ '005'
      OR lv_kotabnr EQ '118'
      OR lv_kotabnr EQ '802'
      OR lv_kotabnr EQ '804'
      OR lv_kotabnr EQ '904'
      OR lv_kotabnr EQ '920'
      OR lv_kotabnr EQ '921'
      OR lv_kotabnr EQ '922'
      OR lv_kotabnr EQ '923'
      OR lv_kotabnr EQ '925'.

*Material Code
      PERFORM bdc_field USING 'KOMG-MATNR(01)'
                              wa_zvsl03-matnr.
*Material Group
    ELSEIF lv_kotabnr EQ '809'
        OR lv_kotabnr EQ '924'
        OR lv_kotabnr EQ '930'.
      PERFORM bdc_field USING 'KOMG-MATKL(01)'
                              wa_zvsl03-matkl.
*Brand
    ELSEIF lv_kotabnr EQ '927'
        OR lv_kotabnr EQ '928'
        OR lv_kotabnr EQ '929'.
      PERFORM bdc_field USING 'KOMG-EXTWG(01)'
                              wa_zvsl03-extwg.
*Documented Currency
    ELSEIF lv_kotabnr EQ '903'.
*      PERFORM bdc_field USING 'KOMG-WAERK(01)'
*                              wa_zvsl03-waerk.
    ENDIF.
*---------------------------------------------------------
*End of First Column Input

*Amount
    PERFORM bdc_field USING 'KONP-KBETR(01)'
                            lv_kbetr_c.


*Rate Unit (Condition Currency)
    IF r_zmpl EQ abap_true.
*       r_zmul EQ abap_true.
      PERFORM bdc_field USING 'KONP-KONWA(01)'
                              wa_zvsl03-konwa.
    ENDIF.

*Valid From
    PERFORM bdc_field USING 'RV13A-DATAB(01)'
                            lv_date.

*Valid To
    PERFORM bdc_field USING 'RV13A-DATBI(01)'
                            '31.12.9999'.

*Hit Save
    PERFORM bdc_field USING 'BDC_OKCODE'
                            '=SICH'.

*Call Transaction
    IF x_updpri EQ abap_true.
      CALL TRANSACTION 'VK11' USING it_bdcdata MODE 'N'
        UPDATE 'S'
        MESSAGES INTO it_messtab.

      IF it_messtab[] IS NOT INITIAL.
        READ TABLE it_messtab INTO wa_messtab
          INDEX 1.

        IF sy-subrc EQ 0.
          CALL FUNCTION 'FORMAT_MESSAGE'
            EXPORTING
              id        = wa_messtab-msgid
              lang      = wa_messtab-msgspra
              no        = wa_messtab-msgnr
              v1        = wa_messtab-msgv1
              v2        = wa_messtab-msgv2
              v3        = wa_messtab-msgv3
              v4        = wa_messtab-msgv4
            IMPORTING
              msg       = lv_message
            EXCEPTIONS
              not_found = 1
              OTHERS    = 2.

          IF sy-subrc <> 0.
* Implement suitable error handling here
          ELSE.
            wa_zvsl03-status = lv_message.

            IF wa_messtab-msgtyp EQ 'S'.
              wa_zvsl03-status_ind = 'S'.
            ELSE.
              wa_zvsl03-status_ind = 'E'.
            ENDIF.
          ENDIF.

          MODIFY it_zvsl03_n FROM wa_zvsl03
                TRANSPORTING status_ind
                             status
                       WHERE matnr = wa_zvsl03-matnr.
        ENDIF.
      ENDIF.

    ELSE.
      wa_zvsl03-status_ind = 'S'.
      wa_zvsl03-status = 'Price Updated (Simulated)'.
      MODIFY it_zvsl03_n FROM wa_zvsl03
      TRANSPORTING status_ind
                   status
             WHERE matnr = wa_zvsl03-matnr.
    ENDIF.

*Material Number
    wa_output-matnr = wa_zvsl03-matnr.
*Condition Type
    wa_output-knumh = wa_zvsl03-knumh.
*Brand
    wa_output-extwg = wa_zvsl03-extwg.
*Material Description
    wa_output-maktx = wa_zvsl03-maktx.
*Material Old Value
    wa_output-old_value = <old_field>.
*Material New Value
    wa_output-new_value  = lv_kbetr_c.
*Status of the outcome
    IF wa_zvsl03-status_ind IS NOT INITIAL.
      wa_output-status_ind  = wa_zvsl03-status_ind.
    ELSE.
      wa_output-status_ind = 'E'.
    ENDIF.
*Status of the outcome (Description)
    wa_output-status = wa_zvsl03-status.

    APPEND wa_output TO it_output.
  ENDLOOP.
ENDFORM.                    " UDPATE_PRICE
*&---------------------------------------------------------------------*
*&      Form  BDC_DYNPRO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_5194   text
*      -->P_5195   text
*----------------------------------------------------------------------*
FORM bdc_dynpro  USING program
                       dynpro.

  CLEAR wa_bdcdata.

  wa_bdcdata-program  = program.
  wa_bdcdata-dynpro   = dynpro.
  wa_bdcdata-dynbegin = 'X'.
  APPEND wa_bdcdata TO it_bdcdata.

ENDFORM.                    " BDC_DYNPRO
*&---------------------------------------------------------------------*
*&      Form  BDC_FIELD
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_5199   text
*      -->P_5200   text
*----------------------------------------------------------------------*
FORM bdc_field  USING fnam fval.

  CLEAR wa_bdcdata.

  wa_bdcdata-fnam = fnam.
  wa_bdcdata-fval = fval.
  APPEND wa_bdcdata TO it_bdcdata.

ENDFORM.                    " BDC_FIELD
*&---------------------------------------------------------------------*
*&      Form  DISPLAY_ALV
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM display_alv.
  PERFORM fieldcatalog.
  PERFORM build_layout.
  PERFORM display_report.
ENDFORM.                    " DISPLAY_ALV
*&---------------------------------------------------------------------*
*&      Form  FIELDCATALOG
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM fieldcatalog.
*  DATA: l_count(2) TYPE c VALUE '00'.

  CLEAR: it_fieldcat.
  REFRESH: it_fieldcat.

  IF <matnr> IS ASSIGNED.
    CLEAR wa_fieldcat.
    wa_fieldcat-tabname     = 'IT_OUTPUT'.
    wa_fieldcat-fieldname   = 'MATNR'.
    wa_fieldcat-seltext_m   = 'Material'.
    wa_fieldcat-outputlen   = '18'.
    wa_fieldcat-no_zero = c_x.
    wa_fieldcat-emphasize = c_x.
    APPEND wa_fieldcat TO it_fieldcat.

    CLEAR wa_fieldcat.
    wa_fieldcat-tabname     = 'IT_OUTPUT'.
    wa_fieldcat-fieldname   = 'MAKTX'.
    wa_fieldcat-seltext_m   = 'Mat.Desc'.
    wa_fieldcat-outputlen   = '18'.
    APPEND wa_fieldcat TO it_fieldcat.
  ENDIF.

  IF <extwg> IS ASSIGNED.
    CLEAR wa_fieldcat.
    wa_fieldcat-tabname     = 'IT_OUTPUT'.
    wa_fieldcat-fieldname   = 'EXTWG'.
    wa_fieldcat-seltext_m   = 'Brand'.
    wa_fieldcat-outputlen   = '18'.
    wa_fieldcat-no_zero = c_x.
    wa_fieldcat-emphasize = c_x.
    APPEND wa_fieldcat TO it_fieldcat.
  ENDIF.

  IF <knumh> IS ASSIGNED.
    CLEAR wa_fieldcat.
    wa_fieldcat-tabname     = 'IT_OUTPUT'.
    wa_fieldcat-fieldname   = 'KNUMH'.
    wa_fieldcat-seltext_m   = 'Previous Condition Record Number'.
    wa_fieldcat-outputlen   = '18'.
    APPEND wa_fieldcat TO it_fieldcat.
  ENDIF.

  CLEAR wa_fieldcat.
  wa_fieldcat-tabname     = 'IT_OUTPUT'.
  wa_fieldcat-fieldname   = 'OLD_VALUE'.
  wa_fieldcat-seltext_m   = 'Old Value'.
  wa_fieldcat-outputlen   = '10'.
  APPEND wa_fieldcat TO it_fieldcat.

  CLEAR wa_fieldcat.
  wa_fieldcat-tabname     = 'IT_OUTPUT'.
  wa_fieldcat-fieldname   = 'NEW_VALUE'.
  wa_fieldcat-seltext_m   = 'New Value'.
  wa_fieldcat-outputlen   = '10'.
  wa_fieldcat-emphasize = c_x.
  APPEND wa_fieldcat TO it_fieldcat.


  CLEAR wa_fieldcat.
  wa_fieldcat-tabname     = 'IT_OUTPUT'.
  wa_fieldcat-fieldname   = 'STATUS_IND'.
  wa_fieldcat-seltext_m   = 'Status.Ind.'.
  wa_fieldcat-outputlen   = '10'.
  APPEND wa_fieldcat TO it_fieldcat.

  CLEAR wa_fieldcat.
  wa_fieldcat-tabname     = 'IT_OUTPUT'.
  wa_fieldcat-fieldname   = 'STATUS'.
  wa_fieldcat-seltext_m   = 'Status'.
  wa_fieldcat-outputlen   = '50'.
  APPEND wa_fieldcat TO it_fieldcat.


**Building Sort Catalog
*  CLEAR: wa_sort.
*  wa_sort-spos = 1.
*  wa_sort-fieldname = 'MATNR'.
*  wa_sort-up = c_x.
*  APPEND wa_sort TO it_sort.

ENDFORM.                    " FIELDCATALOG
*&---------------------------------------------------------------------*
*&      Form  BUILD_LAYOUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM build_layout .
  wa_layout-no_input = c_x.
  wa_layout-coltab_fieldname = 'CELLCOLOR'.
ENDFORM.                    " BUILD_LAYOUT

*&---------------------------------------------------------------------*
*&      Form  DISPLAY_REPORT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM display_report.
  DATA: l_repid TYPE sy-repid.

  wa_event-form = 'TOP_OF_PAGE'.
  wa_event-name = slis_ev_top_of_page.
  APPEND wa_event TO it_event.

  l_repid = sy-repid.

  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
    EXPORTING
      i_callback_program     = l_repid
      i_callback_top_of_page = 'TOP_OF_PAGE'
      it_fieldcat            = it_fieldcat[]
      it_events              = it_event[]
    TABLES
      t_outtab               = it_output
    EXCEPTIONS
      program_error          = 1
      OTHERS                 = 2.

  IF sy-subrc <> 0.
* Implement suitable error handling here
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
        WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.
ENDFORM.                    " DISPLAY_REPORT

*&---------------------------------------------------------------------*
*&      Form  TOP_OF_PAGE
*&---------------------------------------------------------------------*
* Event: TOP_OF_PAGE of ALV grid
* Processed ONCE
*----------------------------------------------------------------------*
FORM top_of_page.

* ALV Header declarations
  DATA: it_header TYPE slis_t_listheader,
        wa_header TYPE slis_listheader.

  DATA: l_date(10)    TYPE c,
        l_time(10)    TYPE c,
        l_records(10) TYPE c.

  DATA: cnt TYPE i VALUE c_1.

  DATA: l_line TYPE i VALUE IS INITIAL.

  " Main heading
  wa_header-typ  = 'H'.
  wa_header-info = 'Update SAP Pricing'.
  APPEND wa_header TO it_header.
  CLEAR wa_header.

  " Date
  wa_header-typ  = 'S'.
  CONCATENATE sy-datum+6(2) sy-datum+4(2) sy-datum(4) INTO l_date SEPARATED BY '/'.
  CONCATENATE 'Date:' l_date INTO wa_header-info SEPARATED BY space .
  APPEND wa_header TO it_header.
  CLEAR wa_header.

  " Time
  wa_header-typ  = 'S'.
  CLEAR l_time.
  CONCATENATE sy-uzeit(2) sy-uzeit+2(2) sy-uzeit+4(2) INTO l_time SEPARATED BY ':'.
  CONCATENATE 'Time:' l_time INTO wa_header-info SEPARATED BY space .
  APPEND wa_header TO it_header.
  CLEAR wa_header.

  " Total Record
  DESCRIBE TABLE it_output LINES l_line.
  l_records = l_line.
  wa_header-typ  = 'S'.
  CLEAR l_time.
  CONCATENATE 'Total Records:' l_records INTO wa_header-info SEPARATED BY space .
  APPEND wa_header TO it_header.
  CLEAR wa_header.

  APPEND wa_header TO it_header.
  CLEAR wa_header.

  CALL FUNCTION 'REUSE_ALV_COMMENTARY_WRITE'
    EXPORTING
      it_list_commentary = it_header.

ENDFORM.                    "TOP_OF_PAGE
*&---------------------------------------------------------------------*
*&      Form  CHECK_SCREEN
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM check_screen .
  IF r_zmpl EQ abap_true.
*  ELSEIF r_zmul EQ abap_true.
  ELSEIF r_zfrt EQ abap_true.
    CASE abap_true.
      WHEN r_zfrt01.
        IF s_matnr[] IS INITIAL.
          MESSAGE e000(zc903) WITH 'Please enter valid Material Code'.
        ENDIF.
      WHEN r_zfrt02.
        IF p_vtweg IS INITIAL AND
          s_matnr[] IS INITIAL.
          MESSAGE e000(zc903) WITH 'Please enter valid Material Code'.
        ENDIF.
      WHEN r_zfrt03.
        IF s_matnr[] IS INITIAL AND p_inco IS INITIAL.
          MESSAGE e000(zc903) WITH 'Please enter valid Material Code'.
        ENDIF.
      WHEN r_zfrt04.
        IF s_matnr[] IS INITIAL AND p_inco IS INITIAL.
          MESSAGE e000(zc903) WITH 'Please enter valid Material Code'.
        ENDIF.
      WHEN r_zfrt05.
        IF s_extwg[] IS INITIAL AND p_inco IS INITIAL.
          MESSAGE e000(zc903) WITH 'Please enter valid Brand'.
        ENDIF.
    ENDCASE.
  ELSEIF r_zdis EQ abap_true.
    CASE abap_true.
      WHEN r_zdis01.
        IF p_kunnr EQ space AND
          s_matnr[] IS INITIAL.
          MESSAGE e000(zc903) WITH 'Please enter Customer Number or Material Code'.
        ENDIF.
      WHEN r_zdis02.
        IF p_kunnr EQ space AND
           ( s_extwg[] IS INITIAL AND s_matkl[] IS INITIAL ).
          MESSAGE e000(zc903) WITH 'Please enter either Customer with Brand or Material Group'.
        ENDIF.
      WHEN r_zdis03.
        IF p_kunnr EQ space AND
           s_extwg[] IS INITIAL.
          MESSAGE e000(zc903) WITH 'Please enter Customer Number or Brand'.
        ENDIF.
      WHEN r_zdis04.
        IF s_matnr[] IS INITIAL.
          MESSAGE e000(zc903) WITH 'Please enter at least a Material Code'.
        ENDIF.
      WHEN r_zdis05.
        IF s_extwg[] IS INITIAL AND
           s_matkl[] IS INITIAL.
          MESSAGE e000(zc903) WITH 'Please enter Brand or Material Group'.
        ENDIF.
      WHEN r_zdis06.
        IF s_extwg[] IS INITIAL.
          MESSAGE e000(zc903) WITH 'Please enter Brand'.
        ENDIF.
    ENDCASE.
  ENDIF.
ENDFORM.                    " CHECK_SCREEN
