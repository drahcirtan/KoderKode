*----------------------------------------------------------------------*
***INCLUDE LZFG0007F01.
*----------------------------------------------------------------------*

*----------------------------------------------------------------------*
***When Creating a new Entries
*----------------------------------------------------------------------*
FORM create.
  DATA: wa_cust_status TYPE zvs_cust_status.

  CLEAR: zvs_cust_status-upd_name,
         zvs_cust_status-upd_date,
         zvs_cust_status-crt_name,
         zvs_cust_status-crt_date.

  SELECT SINGLE * FROM zvs_cust_status
    INTO wa_cust_status
    WHERE vkorg EQ zvs_cust_status-vkorg
      AND kunnr EQ zvs_cust_status-kunnr.

  IF sy-subrc EQ 0.
    wa_cust_status-valid_to = zvs_cust_status-valid_from - 1.
  ENDIF.

*  IF zvs_price_margin-werks IS INITIAL
*    OR zvs_price_margin-werks EQ '*'.
*    MESSAGE e398(00) WITH 'Enter a valid plant'.
*  ELSE.
*    SELECT SINGLE werks FROM t001w
*      INTO lv_werks
*        WHERE werks EQ zvs_price_margin-werks.
*    IF sy-subrc NE 0.
*      MESSAGE e398(00) WITH 'Enter a valid plant'.
*    ENDIF.
*  ENDIF.
*
*  IF zvs_price_margin-matkl IS INITIAL.
*    MESSAGE e398(00) WITH 'Enter a valid material group or *'.
*  ENDIF.
*
*  IF zvs_price_margin-kunnr IS INITIAL.
*    MESSAGE e398(00) WITH 'Enter a valid customer or *'.
*  ENDIF.
*
*  IF zvs_price_margin-matnr IS INITIAL.
*    MESSAGE e398(00) WITH 'Enter a valid material number or *'.
*  ENDIF.
*
*  IF zvs_price_margin-datab IS INITIAL.
*    MESSAGE e398(00) WITH 'Enter a valid date'.
*  ENDIF.

** -- Created On & Created By
  zvs_cust_status-crt_name = sy-uname.
  zvs_cust_status-crt_date = sy-datum.
ENDFORM.

*----------------------------------------------------------------------*
***When updating a new entries
*----------------------------------------------------------------------*

FORM update.
  FIELD-SYMBOLS: <fs_field>       TYPE any,
                 <vkorg>          TYPE any,
                 <kunnr>          TYPE any,
                 <l_vkorg>        TYPE any,
                 <l_kunnr>        TYPE any,
                 <wa_total>       TYPE any,
                 <wa_total_struc> TYPE any.

  FIELD-SYMBOLS: <lt_total> TYPE ANY TABLE.

  DATA: lv_date       TYPE datum,
        lv_valid_from TYPE datum,
        lv_tabix      TYPE syst_tabix,
        lv_index      TYPE syst_index,
        lv_table(132) TYPE c.

  DATA: wa_cust_status TYPE zvs_cust_status.

  DATA: lt_total TYPE STANDARD TABLE OF total WITH HEADER LINE.

  ASSIGN total[] TO <lt_total>.

  IF sy-subrc EQ 0.
    <lt_total>[] = total[].
    lt_total[] = total[].
  ENDIF.

  LOOP AT total.
*    ASSIGN COMPONENT 'EXTWG' OF STRUCTURE <vim_total_struc> TO <extwg>.
*    IF sy-subrc EQ 0.
*      SELECT SINGLE extwg FROM twew
*        INTO lv_extwg
*        WHERE extwg EQ <extwg>.
*
*      IF sy-subrc NE 0.
*        ROLLBACK WORK.
**        MESSAGE i398(00) WITH 'Brand' <extwg> 'does not exist'." DISPLAY LIKE 'E'.
*        MESSAGE 'Brand' TYPE 'S'.
*        EXIT.
*      ENDIF.
*    ENDIF.
*    CHECK <action> EQ aendern.
*    ASSIGN COMPONENT 'AMT' OF STRUCTURE <vim_total_struc> TO <amt>.
*    IF sy-subrc EQ 0.
*      ASSIGN COMPONENT 'AMT_LC' OF STRUCTURE <vim_total_struc> TO <amt_lc>.
*      IF sy-subrc EQ 0.
*        ASSIGN COMPONENT 'WKURS' OF STRUCTURE <vim_total_struc> TO <wkurs>.
*        IF sy-subrc EQ 0.
*          <amt_lc> = <amt> * <wkurs>.
*        ENDIF.
*      ENDIF.
*    ENDIF.


*IF action = N means new entry, U means Update/Modified
    IF <action> EQ aendern.
** -- Updated By
      UNASSIGN <fs_field>.

      ASSIGN COMPONENT 'UPD_NAME' OF STRUCTURE <vim_total_struc> TO <fs_field>.

      IF <fs_field> IS ASSIGNED.
        <fs_field> = sy-uname.
      ENDIF.


** -- Updated On
      UNASSIGN <fs_field>.

      ASSIGN COMPONENT 'UPD_DATE' OF STRUCTURE <vim_total_struc> TO <fs_field>.

      IF <fs_field> IS ASSIGNED.
        <fs_field> = sy-datum.
      ENDIF.

      IF <fs_field> IS ASSIGNED.
*Get the table index of the tables
        READ TABLE extract WITH KEY <vim_xtotal_key>.

        IF sy-subrc EQ 0.
          extract = total.
          MODIFY extract INDEX sy-tabix.
        ENDIF.

        IF total IS NOT INITIAL.
          MODIFY total.
        ENDIF.
      ENDIF.

    ELSEIF <action> EQ 'N'.
*New Entries
      UNASSIGN <vkorg>.
      ASSIGN COMPONENT 'VKORG' OF STRUCTURE <vim_total_struc> TO <vkorg>.

      UNASSIGN <kunnr>.
      ASSIGN COMPONENT 'KUNNR' OF STRUCTURE <vim_total_struc> TO <kunnr>.

      UNASSIGN <fs_field>.
      ASSIGN COMPONENT 'VALID_FROM' OF STRUCTURE <vim_total_struc> TO <fs_field>.

*Set valid to and valid from date
      IF <fs_field> IS ASSIGNED.
        lv_valid_from = <fs_field>.
        lv_date = <fs_field> - 1.
      ENDIF.

*if assigning fails
      IF <vkorg> IS  NOT ASSIGNED
        OR <kunnr> IS NOT ASSIGNED
        OR <fs_field> IS NOT ASSIGNED.
        ROLLBACK WORK.
        MESSAGE e398(00) WITH 'Error in processing'.
      ENDIF.

*Look if there is existing record of the same key field
*if yes, end the "Valid_To" date to one day before the
*new entries "Valid_From" date
      LOOP AT <lt_total> ASSIGNING <wa_total>.

*Move to work area for easier setting the values
        MOVE <wa_total> TO wa_cust_status.
*Get the table index
        lv_tabix = sy-tabix.

*Ensure its the correct(based on identical) key fields
        IF <vkorg> EQ wa_cust_status-vkorg
          AND <kunnr> EQ wa_cust_status-kunnr.

*Only change those entries with "Valid_To" equal to high date
*DO NOT CHANGE THE NEW ENTRIES
          IF wa_cust_status-valid_to EQ '99991231'
           AND wa_cust_status-valid_from NE lv_valid_from.

*Set the new "Valid To" date for previous record
            wa_cust_status-valid_to = lv_date.

*Assign an imaginary record for auto update by system
            wa_cust_status-upd_name = 'FEGUPD'.
            wa_cust_status-upd_date = sy-datum.
            MOVE wa_cust_status TO lv_table.

*Set the record to be "Updated" hence will be processed by system
*NEW RECORD SHOULD BE 'N' INSTEAD OF 'U', hence will not be changed here
            CONCATENATE lv_table 'U' INTO lv_table.

            MOVE lv_table TO total.

*Update both the Total and Extract table
            MODIFY total INDEX lv_tabix.

            extract = total.

            MODIFY extract INDEX lv_tabix.
          ENDIF.
        ENDIF.
      ENDLOOP.
    ENDIF.
  ENDLOOP.
ENDFORM.

*----------------------------------------------------------------------*
***Before the Screen Appear
*----------------------------------------------------------------------*
FORM initialisation.

* Set the columns to be output
  LOOP AT <vim_tctrl>-cols INTO vim_tc_cols.
    IF   vim_tc_cols-screen-name = 'ZVS_CUST_STATUS-CRT_DATE'
      OR vim_tc_cols-screen-name = 'ZVS_CUST_STATUS-CRT_NAME'
      OR vim_tc_cols-screen-name = 'ZVS_CUST_STATUS-UPD_DATE'
      OR vim_tc_cols-screen-name = 'ZVS_CUST_STATUS-UPD_NAME'.
      vim_tc_cols-screen-input = '0'.
      MODIFY <vim_tctrl>-cols FROM vim_tc_cols .
    ENDIF.
  ENDLOOP.

*  LOOP AT x_namtab
*    WHERE viewfield EQ 'ZVS_PRICE_MARGIN-CRT_NAME'
*       OR viewfield EQ 'ZVS_PRICE_MARGIN-CRT_DATE'
*       OR viewfield EQ 'ZVS_PRICE_MARGIN-UPD_DATE'
*       OR viewfield EQ 'ZVS_PRICE_MARGIN-UPD_NAME'.
*
*    x_namtab-readonly = 'R'. " Set field to Read only.
*    MODIFY x_namtab.
*  ENDLOOP.
ENDFORM.

*----------------------------------------------------------------------*
***Before the Screen Appear
*----------------------------------------------------------------------*
FORM check_and_resize_tablecontrol.
*  CHECK iv_width <= 255.

  DATA: iv_width TYPE i VALUE 240.
  DATA: BEGIN OF gs_dynpro_descr,
          prog   TYPE progname,
          dynpro TYPE char4,
        END OF gs_dynpro_descr.

  DATA:
    lv_fnam TYPE d021s-fnam,
    lv_stxt TYPE d021s-stxt,
    lv_didx TYPE d021s-didx,
    h       TYPE d020s,
    ls_f    TYPE d021s,
    f       TYPE d021s OCCURS 0 WITH HEADER LINE,
    e       TYPE d022s OCCURS 0 WITH HEADER LINE,
    m       TYPE d023s OCCURS 0 WITH HEADER LINE.

  DATA:
    m1 TYPE string,
    l1 TYPE string,
    w1 TYPE string.

* convert to hexa
  DATA: lv_crmt_ei_kb_id TYPE crmt_ei_kb_id.

  CONCATENATE 'SAPL' 'ZFG0007' INTO gs_dynpro_descr-prog.
  gs_dynpro_descr-dynpro = '0001'.

  IMPORT DYNPRO h f e m ID gs_dynpro_descr.

  CLEAR: lv_fnam.
  CONCATENATE 'TCTRL_' 'ZVS_CUST_STATUS' INTO lv_fnam.

  READ TABLE f INTO ls_f WITH KEY fnam = lv_fnam.
  CHECK sy-subrc = 0.

  h-noco = iv_width.

  lv_crmt_ei_kb_id = iv_width.

  CALL FUNCTION 'CRM_EI_KB_CONV_DEC_TO_HEX'
    EXPORTING
      iv_decimal = lv_crmt_ei_kb_id
    IMPORTING
      ev_hex     = lv_crmt_ei_kb_id.

  CHECK NOT lv_crmt_ei_kb_id+30(2) IS INITIAL.

  ls_f-leng = lv_crmt_ei_kb_id+30(2).

  MODIFY f FROM ls_f INDEX sy-tabix TRANSPORTING leng.

  LOOP AT f INTO ls_f.
    CLEAR: iv_width, lv_stxt.
    IF ls_f-fnam EQ 'ZVS_CUST_STATUS-VKORG'.
      iv_width = '6'.
    ELSEIF ls_f-fnam EQ 'ZVS_CUST_STATUS-KUNNR'.
      iv_width = '15'.
    ELSEIF ls_f-fnam EQ 'ZVS_CUST_STATUS-VALID_FROM'.
      iv_width = '12'.
    ELSEIF ls_f-fnam EQ 'ZVS_CUST_STATUS-VALID_TO'.
      iv_width = '12'.
    ELSEIF ls_f-fnam EQ 'ZVS_CUST_STATUS-CUST'.
      iv_width = '15'.
    ELSEIF ls_f-fnam EQ 'ZVS_CUST_STATUS-UPD_NAME'.
      iv_width = '12'.
    ELSEIF ls_f-fnam EQ 'ZVS_CUST_STATUS-UPD_DATE'.
      iv_width = '12'.
    ELSEIF ls_f-fnam EQ 'ZVS_CUST_STATUS-CRT_NAME'.
      iv_width = '12'.
    ELSEIF ls_f-fnam EQ 'ZVS_CUST_STATUS-CRT_DATE'.
      iv_width = '12'.
    ELSEIF ls_f-fnam EQ '*ZVS_CUST_STATUS-VALID_FROM'.
      lv_stxt = 'Valid From'.
    ELSEIF ls_f-fnam EQ '*ZVS_CUST_STATUS-VALID_TO'.
      lv_stxt = 'Valid To'.
    ELSEIF ls_f-fnam EQ '*ZVS_CUST_STATUS-UPD_NAME'.
      lv_stxt = 'Updated By'.
    ELSEIF ls_f-fnam EQ '*ZVS_CUST_STATUS-UPD_DATE'.
      lv_stxt = 'Updated On'.
    ELSEIF ls_f-fnam EQ '*ZVS_CUST_STATUS-CRT_NAME'.
      lv_stxt = 'Created By'.
    ELSEIF ls_f-fnam EQ '*ZVS_CUST_STATUS-CRT_DATE'.
      lv_stxt = 'Created On'.
    ELSE.
      CONTINUE.
    ENDIF.

*Change the Text
    IF lv_stxt IS NOT INITIAL.
      ls_f-stxt = lv_stxt.
    ENDIF.

*Change the Length
    IF iv_width IS NOT INITIAL.
      lv_crmt_ei_kb_id = iv_width.
      CALL FUNCTION 'CRM_EI_KB_CONV_DEC_TO_HEX'
        EXPORTING
          iv_decimal = lv_crmt_ei_kb_id
        IMPORTING
          ev_hex     = lv_crmt_ei_kb_id.

      IF lv_crmt_ei_kb_id+30(2) IS NOT INITIAL.
        ls_f-leng = lv_crmt_ei_kb_id+30(2).
        ls_f-didx = lv_crmt_ei_kb_id+28(4).
      ENDIF.
    ENDIF.
*Modified
    MODIFY f FROM ls_f INDEX sy-tabix TRANSPORTING didx leng aglt stxt.

  ENDLOOP.

  EXPORT DYNPRO h f e m ID gs_dynpro_descr.

  GENERATE DYNPRO h f e m ID gs_dynpro_descr MESSAGE m1 LINE l1 WORD w1.

  CLEAR ls_f.
ENDFORM.
